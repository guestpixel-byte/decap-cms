"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.mergeMediaConfig = mergeMediaConfig;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _slate = require("slate");
var _slateReact = require("slate-react");
var _slateHistory = require("slate-history");
var _immutable = require("immutable");
var _styles = require("../styles");
var _Toolbar = _interopRequireDefault(require("./Toolbar"));
var _renderers = require("./renderers");
var _withLists = _interopRequireDefault(require("./plugins/lists/withLists"));
var _withBlocks = _interopRequireDefault(require("./plugins/blocks/withBlocks"));
var _withInlines = _interopRequireDefault(require("./plugins/inlines/withInlines"));
var _toggleMark = _interopRequireDefault(require("./plugins/inlines/events/toggleMark"));
var _toggleLink = _interopRequireDefault(require("./plugins/inlines/events/toggleLink"));
var _getActiveLink = _interopRequireDefault(require("./plugins/inlines/selectors/getActiveLink"));
var _isMarkActive = _interopRequireDefault(require("./plugins/inlines/locations/isMarkActive"));
var _isCursorInBlockType = _interopRequireDefault(require("./plugins/blocks/locations/isCursorInBlockType"));
var _serializers = require("../serializers");
var _withShortcodes = _interopRequireDefault(require("./plugins/shortcodes/withShortcodes"));
var _insertShortcode = _interopRequireDefault(require("./plugins/shortcodes/insertShortcode"));
var _defaultEmptyBlock = _interopRequireDefault(require("./plugins/blocks/defaultEmptyBlock"));
var _withHtml = _interopRequireDefault(require("./plugins/html/withHtml"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } // @refresh reset
function visualEditorStyles({
  minimal
}) {
  return `
  position: relative;
  overflow: auto;
  font-family: ${_decapCmsUiDefault.fonts.primary};
  min-height: ${minimal ? 'auto' : _decapCmsUiDefault.lengths.richTextEditorMinHeight};
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  border-top: 0;
  margin-top: -${_styles.editorStyleVars.stickyDistanceBottom};
  padding: 0;
  display: flex;
  flex-direction: column;
  z-index: ${_decapCmsUiDefault.zIndex.zIndex100};
`;
}
const InsertionPoint = /*#__PURE__*/(0, _base.default)("div", {
  target: "ebiot7z0",
  label: "InsertionPoint"
})(process.env.NODE_ENV === "production" ? {
  name: "ma7xbc",
  styles: "flex:1 1 auto;cursor:text"
} : {
  name: "ma7xbc",
  styles: "flex:1 1 auto;cursor:text",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function mergeMediaConfig(editorComponents, field) {
  // merge editor media library config to image components
  if (editorComponents.has('image')) {
    const imageComponent = editorComponents.get('image');
    const fields = imageComponent === null || imageComponent === void 0 ? void 0 : imageComponent.fields;
    if (fields) {
      imageComponent.fields = fields.update(fields.findIndex(f => f.get('widget') === 'image'), f => {
        // merge `media_library` config
        if (field.has('media_library')) {
          f = f.set('media_library', field.get('media_library').mergeDeep(f.get('media_library')));
        }
        // merge 'media_folder'
        if (field.has('media_folder') && !f.has('media_folder')) {
          f = f.set('media_folder', field.get('media_folder'));
        }
        // merge 'public_folder'
        if (field.has('public_folder') && !f.has('public_folder')) {
          f = f.set('public_folder', field.get('public_folder'));
        }
        return f;
      });
    }
  }
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "j8ayvn-Editor",
  styles: "position:relative;label:Editor;"
} : {
  name: "j8ayvn-Editor",
  styles: "position:relative;label:Editor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function Editor(props) {
  const {
    onAddAsset,
    getAsset,
    className,
    field,
    isShowModeToggle,
    t,
    isDisabled,
    getEditorComponents,
    getRemarkPlugins,
    onChange
  } = props;
  const editor = (0, _react.useMemo)(() => (0, _withHtml.default)((0, _slateReact.withReact)((0, _slateHistory.withHistory)((0, _withShortcodes.default)((0, _withBlocks.default)((0, _withLists.default)((0, _withInlines.default)((0, _slate.createEditor)()))))))), []);
  const emptyValue = [(0, _defaultEmptyBlock.default)()];
  let editorComponents = getEditorComponents();
  const codeBlockComponent = (0, _immutable.fromJS)(editorComponents.find(({
    type
  }) => type === 'code-block'));
  editorComponents = codeBlockComponent || editorComponents.has('code-block') ? editorComponents : editorComponents.set('code-block', {
    label: 'Code Block',
    type: 'code-block'
  });
  mergeMediaConfig(editorComponents, field);
  const [editorValue, setEditorValue] = (0, _react.useState)(props.value ? (0, _serializers.markdownToSlate)(props.value, {
    voidCodeBlock: !!codeBlockComponent,
    remarkPlugins: getRemarkPlugins()
  }) : emptyValue);
  const renderElement = (0, _react.useCallback)(props => (0, _react2.jsx)(_renderers.Element, _extends({}, props, {
    classNameWrapper: className,
    codeBlockComponent: codeBlockComponent
  })), []);
  const renderLeaf = (0, _react.useCallback)(props => (0, _react2.jsx)(_renderers.Leaf, props), []);
  (0, _react.useEffect)(() => {
    if (props.pendingFocus) {
      _slateReact.ReactEditor.focus(editor);
    }
  }, []);
  function handleMarkClick(format) {
    _slateReact.ReactEditor.focus(editor);
    (0, _toggleMark.default)(editor, format);
  }
  function handleBlockClick(format) {
    _slateReact.ReactEditor.focus(editor);
    if (format.endsWith('-list')) {
      editor.toggleList(format);
    } else {
      editor.toggleBlock(format);
    }
  }
  function handleLinkClick() {
    (0, _toggleLink.default)(editor, t('editor.editorWidgets.markdown.linkPrompt'));
    _slateReact.ReactEditor.focus(editor);
  }
  function handleToggleMode() {
    props.onMode('raw');
  }
  function handleInsertShortcode(pluginConfig) {
    (0, _insertShortcode.default)(editor, pluginConfig);
  }
  function handleKeyDown(event) {
    for (const handler of editor.keyDownHandlers || []) {
      if (handler(event, editor) === false) {
        break;
      }
    }
    _slateReact.ReactEditor.focus(editor);
  }
  function handleClickBelowDocument() {
    _slateReact.ReactEditor.focus(editor);
    _slate.Transforms.select(editor, {
      path: [0, 0],
      offset: 0
    });
    _slate.Transforms.select(editor, _slate.Editor.end(editor, []));
  }
  const [toolbarKey, setToolbarKey] = (0, _react.useState)(0);
  function handleChange(newValue) {
    if (!(0, _isEqual2.default)(newValue, editorValue)) {
      setEditorValue(() => newValue);
      onChange((0, _serializers.slateToMarkdown)(newValue, {
        voidCodeBlock: !!codeBlockComponent,
        remarkPlugins: getRemarkPlugins()
      }));
    }
    setToolbarKey(prev => prev + 1);
  }
  function hasMark(format) {
    return (0, _isMarkActive.default)(editor, format);
  }
  function hasInline(format) {
    if (format == 'link') {
      return !!(0, _getActiveLink.default)(editor);
    }
    return false;
  }
  function hasBlock(format) {
    return (0, _isCursorInBlockType.default)(editor, format);
  }
  function hasQuote() {
    return (0, _isCursorInBlockType.default)(editor, 'quote');
  }
  function hasListItems(type) {
    return (0, _isCursorInBlockType.default)(editor, type);
  }
  return (0, _react2.jsx)("div", {
    css: _ref
  }, (0, _react2.jsx)(_slateReact.Slate, {
    editor: editor,
    value: editorValue,
    onChange: handleChange
  }, (0, _react2.jsx)(_styles.EditorControlBar, null, (0, _react2.jsx)(_Toolbar.default, {
    key: toolbarKey,
    onMarkClick: handleMarkClick,
    onBlockClick: handleBlockClick,
    onLinkClick: handleLinkClick,
    onToggleMode: handleToggleMode,
    plugins: editorComponents,
    onSubmit: handleInsertShortcode,
    onAddAsset: onAddAsset,
    getAsset: getAsset,
    buttons: field.get('buttons'),
    editorComponents: field.get('editor_components'),
    hasMark: hasMark,
    hasInline: hasInline,
    hasBlock: hasBlock,
    hasQuote: hasQuote,
    hasListItems: hasListItems,
    isShowModeToggle: isShowModeToggle,
    t: t,
    disabled: isDisabled
  })), (0, _react2.jsx)(_react2.ClassNames, null, ({
    css,
    cx
  }) => (0, _react2.jsx)("div", {
    className: cx(className, css`
                    ${visualEditorStyles({
      minimal: field.get('minimal')
    })}
                  `)
  }, editorValue.length !== 0 && (0, _react2.jsx)(_slateReact.Editable, {
    className: css`
                      padding: 16px 20px 0;
                    `,
    renderElement: renderElement,
    renderLeaf: renderLeaf,
    onKeyDown: handleKeyDown,
    autoFocus: false
  }), (0, _react2.jsx)(InsertionPoint, {
    onClick: handleClickBelowDocument
  })))));
}
Editor.propTypes = {
  onAddAsset: _propTypes.default.func.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onMode: _propTypes.default.func.isRequired,
  className: _propTypes.default.string.isRequired,
  value: _propTypes.default.string,
  field: _reactImmutableProptypes.default.map.isRequired,
  getEditorComponents: _propTypes.default.func.isRequired,
  getRemarkPlugins: _propTypes.default.func.isRequired,
  isShowModeToggle: _propTypes.default.bool.isRequired,
  t: _propTypes.default.func.isRequired
};
var _default = exports.default = Editor;