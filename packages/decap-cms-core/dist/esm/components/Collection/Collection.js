"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Collection = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _reactRedux = require("react-redux");
var _reactPolyglot = require("react-polyglot");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _urlHelper = require("../../lib/urlHelper");
var _Sidebar = _interopRequireDefault(require("./Sidebar"));
var _CollectionTop = _interopRequireDefault(require("./CollectionTop"));
var _EntriesCollection = _interopRequireDefault(require("./Entries/EntriesCollection"));
var _EntriesSearch = _interopRequireDefault(require("./Entries/EntriesSearch"));
var _CollectionControls = _interopRequireDefault(require("./CollectionControls"));
var _entries = require("../../actions/entries");
var _collections = require("../../reducers/collections");
var _entries2 = require("../../reducers/entries");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const CollectionContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1sogrfi3",
  label: "CollectionContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "nuwiqs",
  styles: "width:100%;max-width:1280px;overflow:hidden;display:flex;gap:1rem;border:2px solid red;padding:1rem"
} : {
  name: "nuwiqs",
  styles: "width:100%;max-width:1280px;overflow:hidden;display:flex;gap:1rem;border:2px solid red;padding:1rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQnNDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBnZXROZXdFbnRyeVVybCB9IGZyb20gJy4uLy4uL2xpYi91cmxIZWxwZXInO1xuaW1wb3J0IFNpZGViYXIgZnJvbSAnLi9TaWRlYmFyJztcbmltcG9ydCBDb2xsZWN0aW9uVG9wIGZyb20gJy4vQ29sbGVjdGlvblRvcCc7XG5pbXBvcnQgRW50cmllc0NvbGxlY3Rpb24gZnJvbSAnLi9FbnRyaWVzL0VudHJpZXNDb2xsZWN0aW9uJztcbmltcG9ydCBFbnRyaWVzU2VhcmNoIGZyb20gJy4vRW50cmllcy9FbnRyaWVzU2VhcmNoJztcbmltcG9ydCBDb2xsZWN0aW9uQ29udHJvbHMgZnJvbSAnLi9Db2xsZWN0aW9uQ29udHJvbHMnO1xuaW1wb3J0IHsgc29ydEJ5RmllbGQsIGZpbHRlckJ5RmllbGQsIGNoYW5nZVZpZXdTdHlsZSwgZ3JvdXBCeUZpZWxkIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lbnRyaWVzJztcbmltcG9ydCB7XG4gIHNlbGVjdFNvcnRhYmxlRmllbGRzLFxuICBzZWxlY3RWaWV3RmlsdGVycyxcbiAgc2VsZWN0Vmlld0dyb3Vwcyxcbn0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHtcbiAgc2VsZWN0RW50cmllc1NvcnQsXG4gIHNlbGVjdEVudHJpZXNGaWx0ZXIsXG4gIHNlbGVjdEVudHJpZXNHcm91cCxcbiAgc2VsZWN0Vmlld1N0eWxlLFxufSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9lbnRyaWVzJztcblxuY29uc3QgQ29sbGVjdGlvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDEyODBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxcmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XG4gIHBhZGRpbmc6IDFyZW07XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTWFpbiA9IHN0eWxlZC5tYWluYFxuICB3aWR0aDogMTAwJTtcbiAgYm9yZGVyOiAycHggc29saWQgIzAwMDtcbiAgXG5gO1xuXG5jb25zdCBTZWFyY2hSZXN1bHRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAke2NvbXBvbmVudHMuY2FyZFRvcH07XG4gIG1hcmdpbi1ib3R0b206IDIycHg7XG5gO1xuXG5jb25zdCBTZWFyY2hSZXN1bHRIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbGVjdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaXNTZWFyY2hSZXN1bHRzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1NpbmdsZVNlYXJjaFJlc3VsdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgc29ydGFibGVGaWVsZHM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBzb3J0OiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcCxcbiAgICBvblNvcnRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXJFbnRyaWVzQ29sbGVjdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGZpbHRlclRlcm0sIHZpZXdTdHlsZSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPEVudHJpZXNDb2xsZWN0aW9uIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IHZpZXdTdHlsZT17dmlld1N0eWxlfSBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfSAvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRW50cmllc1NlYXJjaCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHNlYXJjaFRlcm0sIGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NpbmdsZVNlYXJjaFJlc3VsdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPEVudHJpZXNTZWFyY2hcbiAgICAgICAgY29sbGVjdGlvbnM9e2lzU2luZ2xlU2VhcmNoUmVzdWx0ID8gY29sbGVjdGlvbnMuZmlsdGVyKGMgPT4gYyA9PT0gY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uc31cbiAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgY29sbGVjdGlvbk5hbWUsXG4gICAgICBpc1NlYXJjaEVuYWJsZWQsXG4gICAgICBpc1NlYXJjaFJlc3VsdHMsXG4gICAgICBpc1NpbmdsZVNlYXJjaFJlc3VsdCxcbiAgICAgIHNlYXJjaFRlcm0sXG4gICAgICBzb3J0YWJsZUZpZWxkcyxcbiAgICAgIG9uU29ydENsaWNrLFxuICAgICAgc29ydCxcbiAgICAgIHZpZXdGaWx0ZXJzLFxuICAgICAgdmlld0dyb3VwcyxcbiAgICAgIGZpbHRlclRlcm0sXG4gICAgICB0LFxuICAgICAgb25GaWx0ZXJDbGljayxcbiAgICAgIG9uR3JvdXBDbGljayxcbiAgICAgIGZpbHRlcixcbiAgICAgIGdyb3VwLFxuICAgICAgb25DaGFuZ2VWaWV3U3R5bGUsXG4gICAgICB2aWV3U3R5bGUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBsZXQgbmV3RW50cnlVcmwgPSBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykgPyBnZXROZXdFbnRyeVVybChjb2xsZWN0aW9uTmFtZSkgOiAnJztcbiAgICBpZiAobmV3RW50cnlVcmwgJiYgZmlsdGVyVGVybSkge1xuICAgICAgbmV3RW50cnlVcmwgPSBnZXROZXdFbnRyeVVybChjb2xsZWN0aW9uTmFtZSk7XG4gICAgICBpZiAoZmlsdGVyVGVybSkge1xuICAgICAgICBuZXdFbnRyeVVybCA9IGAke25ld0VudHJ5VXJsfT9wYXRoPSR7ZmlsdGVyVGVybX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNlYXJjaFJlc3VsdEtleSA9XG4gICAgICAnY29sbGVjdGlvbi5jb2xsZWN0aW9uVG9wLnNlYXJjaFJlc3VsdHMnICsgKGlzU2luZ2xlU2VhcmNoUmVzdWx0ID8gJ0luQ29sbGVjdGlvbicgOiAnJyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbGxlY3Rpb25Db250YWluZXI+XG4gICAgICAgIDxTaWRlYmFyXG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIGNvbGxlY3Rpb249eyghaXNTZWFyY2hSZXN1bHRzIHx8IGlzU2luZ2xlU2VhcmNoUmVzdWx0KSAmJiBjb2xsZWN0aW9ufVxuICAgICAgICAgIGlzU2VhcmNoRW5hYmxlZD17aXNTZWFyY2hFbmFibGVkfVxuICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgLz5cbiAgICAgICAgPENvbGxlY3Rpb25NYWluPlxuICAgICAgICAgIHtpc1NlYXJjaFJlc3VsdHMgPyAoXG4gICAgICAgICAgICA8U2VhcmNoUmVzdWx0Q29udGFpbmVyPlxuICAgICAgICAgICAgICA8U2VhcmNoUmVzdWx0SGVhZGluZz5cbiAgICAgICAgICAgICAgICB7dChzZWFyY2hSZXN1bHRLZXksIHsgc2VhcmNoVGVybSwgY29sbGVjdGlvbjogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJykgfSl9XG4gICAgICAgICAgICAgIDwvU2VhcmNoUmVzdWx0SGVhZGluZz5cbiAgICAgICAgICAgIDwvU2VhcmNoUmVzdWx0Q29udGFpbmVyPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8Q29sbGVjdGlvblRvcCBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufSBuZXdFbnRyeVVybD17bmV3RW50cnlVcmx9IC8+XG4gICAgICAgICAgICAgIDxDb2xsZWN0aW9uQ29udHJvbHNcbiAgICAgICAgICAgICAgICB2aWV3U3R5bGU9e3ZpZXdTdHlsZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZVZpZXdTdHlsZT17b25DaGFuZ2VWaWV3U3R5bGV9XG4gICAgICAgICAgICAgICAgc29ydGFibGVGaWVsZHM9e3NvcnRhYmxlRmllbGRzfVxuICAgICAgICAgICAgICAgIG9uU29ydENsaWNrPXtvblNvcnRDbGlja31cbiAgICAgICAgICAgICAgICBzb3J0PXtzb3J0fVxuICAgICAgICAgICAgICAgIHZpZXdGaWx0ZXJzPXt2aWV3RmlsdGVyc31cbiAgICAgICAgICAgICAgICB2aWV3R3JvdXBzPXt2aWV3R3JvdXBzfVxuICAgICAgICAgICAgICAgIHQ9e3R9XG4gICAgICAgICAgICAgICAgb25GaWx0ZXJDbGljaz17b25GaWx0ZXJDbGlja31cbiAgICAgICAgICAgICAgICBvbkdyb3VwQ2xpY2s9e29uR3JvdXBDbGlja31cbiAgICAgICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgICAgICBncm91cD17Z3JvdXB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpc1NlYXJjaFJlc3VsdHMgPyB0aGlzLnJlbmRlckVudHJpZXNTZWFyY2goKSA6IHRoaXMucmVuZGVyRW50cmllc0NvbGxlY3Rpb24oKX1cbiAgICAgICAgPC9Db2xsZWN0aW9uTWFpbj5cbiAgICAgIDwvQ29sbGVjdGlvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucyB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzU2VhcmNoRW5hYmxlZCA9IHN0YXRlLmNvbmZpZyAmJiBzdGF0ZS5jb25maWcuc2VhcmNoICE9IGZhbHNlO1xuICBjb25zdCB7IGlzU2VhcmNoUmVzdWx0cywgbWF0Y2gsIHQgfSA9IG93blByb3BzO1xuICBjb25zdCB7IG5hbWUsIHNlYXJjaFRlcm0gPSAnJywgZmlsdGVyVGVybSA9ICcnIH0gPSBtYXRjaC5wYXJhbXM7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBuYW1lID8gY29sbGVjdGlvbnMuZ2V0KG5hbWUpIDogY29sbGVjdGlvbnMuZmlyc3QoKTtcbiAgY29uc3Qgc29ydCA9IHNlbGVjdEVudHJpZXNTb3J0KHN0YXRlLmVudHJpZXMsIGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpO1xuICBjb25zdCBzb3J0YWJsZUZpZWxkcyA9IHNlbGVjdFNvcnRhYmxlRmllbGRzKGNvbGxlY3Rpb24sIHQpO1xuICBjb25zdCB2aWV3RmlsdGVycyA9IHNlbGVjdFZpZXdGaWx0ZXJzKGNvbGxlY3Rpb24pO1xuICBjb25zdCB2aWV3R3JvdXBzID0gc2VsZWN0Vmlld0dyb3Vwcyhjb2xsZWN0aW9uKTtcbiAgY29uc3QgZmlsdGVyID0gc2VsZWN0RW50cmllc0ZpbHRlcihzdGF0ZS5lbnRyaWVzLCBjb2xsZWN0aW9uLmdldCgnbmFtZScpKTtcbiAgY29uc3QgZ3JvdXAgPSBzZWxlY3RFbnRyaWVzR3JvdXAoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbi5nZXQoJ25hbWUnKSk7XG4gIGNvbnN0IHZpZXdTdHlsZSA9IHNlbGVjdFZpZXdTdHlsZShzdGF0ZS5lbnRyaWVzKTtcblxuICByZXR1cm4ge1xuICAgIGNvbGxlY3Rpb24sXG4gICAgY29sbGVjdGlvbnMsXG4gICAgY29sbGVjdGlvbk5hbWU6IG5hbWUsXG4gICAgaXNTZWFyY2hFbmFibGVkLFxuICAgIGlzU2VhcmNoUmVzdWx0cyxcbiAgICBzZWFyY2hUZXJtLFxuICAgIGZpbHRlclRlcm0sXG4gICAgc29ydCxcbiAgICBzb3J0YWJsZUZpZWxkcyxcbiAgICB2aWV3RmlsdGVycyxcbiAgICB2aWV3R3JvdXBzLFxuICAgIGZpbHRlcixcbiAgICBncm91cCxcbiAgICB2aWV3U3R5bGUsXG4gIH07XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgc29ydEJ5RmllbGQsXG4gIGZpbHRlckJ5RmllbGQsXG4gIGNoYW5nZVZpZXdTdHlsZSxcbiAgZ3JvdXBCeUZpZWxkLFxufTtcblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4ub3duUHJvcHMsXG4gICAgb25Tb3J0Q2xpY2s6IChrZXksIGRpcmVjdGlvbikgPT5cbiAgICAgIGRpc3BhdGNoUHJvcHMuc29ydEJ5RmllbGQoc3RhdGVQcm9wcy5jb2xsZWN0aW9uLCBrZXksIGRpcmVjdGlvbiksXG4gICAgb25GaWx0ZXJDbGljazogZmlsdGVyID0+IGRpc3BhdGNoUHJvcHMuZmlsdGVyQnlGaWVsZChzdGF0ZVByb3BzLmNvbGxlY3Rpb24sIGZpbHRlciksXG4gICAgb25Hcm91cENsaWNrOiBncm91cCA9PiBkaXNwYXRjaFByb3BzLmdyb3VwQnlGaWVsZChzdGF0ZVByb3BzLmNvbGxlY3Rpb24sIGdyb3VwKSxcbiAgICBvbkNoYW5nZVZpZXdTdHlsZTogdmlld1N0eWxlID0+IGRpc3BhdGNoUHJvcHMuY2hhbmdlVmlld1N0eWxlKHZpZXdTdHlsZSksXG4gIH07XG59XG5cbmNvbnN0IENvbm5lY3RlZENvbGxlY3Rpb24gPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShDb2xsZWN0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoQ29ubmVjdGVkQ29sbGVjdGlvbik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CollectionMain = /*#__PURE__*/(0, _base.default)("main", {
  target: "e1sogrfi2",
  label: "CollectionMain"
})(process.env.NODE_ENV === "production" ? {
  name: "1qvn19n",
  styles: "width:100%;border:2px solid #000"
} : {
  name: "1qvn19n",
  styles: "width:100%;border:2px solid #000",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchResultContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1sogrfi1",
  label: "SearchResultContainer"
})(_decapCmsUiDefault.components.cardTop, ";margin-bottom:22px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SearchResultHeading = /*#__PURE__*/(0, _base.default)("h1", {
  target: "e1sogrfi0",
  label: "SearchResultHeading"
})(_decapCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class Collection extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderEntriesCollection", () => {
      const {
        collection,
        filterTerm,
        viewStyle
      } = this.props;
      return (0, _react2.jsx)(_EntriesCollection.default, {
        collection: collection,
        viewStyle: viewStyle,
        filterTerm: filterTerm
      });
    });
    _defineProperty(this, "renderEntriesSearch", () => {
      const {
        searchTerm,
        collections,
        collection,
        isSingleSearchResult
      } = this.props;
      return (0, _react2.jsx)(_EntriesSearch.default, {
        collections: isSingleSearchResult ? collections.filter(c => c === collection) : collections,
        searchTerm: searchTerm
      });
    });
  }
  render() {
    const {
      collection,
      collections,
      collectionName,
      isSearchEnabled,
      isSearchResults,
      isSingleSearchResult,
      searchTerm,
      sortableFields,
      onSortClick,
      sort,
      viewFilters,
      viewGroups,
      filterTerm,
      t,
      onFilterClick,
      onGroupClick,
      filter,
      group,
      onChangeViewStyle,
      viewStyle
    } = this.props;
    let newEntryUrl = collection.get('create') ? (0, _urlHelper.getNewEntryUrl)(collectionName) : '';
    if (newEntryUrl && filterTerm) {
      newEntryUrl = (0, _urlHelper.getNewEntryUrl)(collectionName);
      if (filterTerm) {
        newEntryUrl = `${newEntryUrl}?path=${filterTerm}`;
      }
    }
    const searchResultKey = 'collection.collectionTop.searchResults' + (isSingleSearchResult ? 'InCollection' : '');
    return (0, _react2.jsx)(CollectionContainer, null, (0, _react2.jsx)(_Sidebar.default, {
      collections: collections,
      collection: (!isSearchResults || isSingleSearchResult) && collection,
      isSearchEnabled: isSearchEnabled,
      searchTerm: searchTerm,
      filterTerm: filterTerm
    }), (0, _react2.jsx)(CollectionMain, null, isSearchResults ? (0, _react2.jsx)(SearchResultContainer, null, (0, _react2.jsx)(SearchResultHeading, null, t(searchResultKey, {
      searchTerm,
      collection: collection.get('label')
    }))) : (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_CollectionTop.default, {
      collection: collection,
      newEntryUrl: newEntryUrl
    }), (0, _react2.jsx)(_CollectionControls.default, {
      viewStyle: viewStyle,
      onChangeViewStyle: onChangeViewStyle,
      sortableFields: sortableFields,
      onSortClick: onSortClick,
      sort: sort,
      viewFilters: viewFilters,
      viewGroups: viewGroups,
      t: t,
      onFilterClick: onFilterClick,
      onGroupClick: onGroupClick,
      filter: filter,
      group: group
    })), isSearchResults ? this.renderEntriesSearch() : this.renderEntriesCollection()));
  }
}
exports.Collection = Collection;
_defineProperty(Collection, "propTypes", {
  searchTerm: _propTypes.default.string,
  collectionName: _propTypes.default.string,
  isSearchResults: _propTypes.default.bool,
  isSingleSearchResult: _propTypes.default.bool,
  collection: _reactImmutableProptypes.default.map.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  sortableFields: _propTypes.default.array,
  sort: _reactImmutableProptypes.default.orderedMap,
  onSortClick: _propTypes.default.func.isRequired
});
function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const isSearchEnabled = state.config && state.config.search != false;
  const {
    isSearchResults,
    match,
    t
  } = ownProps;
  const {
    name,
    searchTerm = '',
    filterTerm = ''
  } = match.params;
  const collection = name ? collections.get(name) : collections.first();
  const sort = (0, _entries2.selectEntriesSort)(state.entries, collection.get('name'));
  const sortableFields = (0, _collections.selectSortableFields)(collection, t);
  const viewFilters = (0, _collections.selectViewFilters)(collection);
  const viewGroups = (0, _collections.selectViewGroups)(collection);
  const filter = (0, _entries2.selectEntriesFilter)(state.entries, collection.get('name'));
  const group = (0, _entries2.selectEntriesGroup)(state.entries, collection.get('name'));
  const viewStyle = (0, _entries2.selectViewStyle)(state.entries);
  return {
    collection,
    collections,
    collectionName: name,
    isSearchEnabled,
    isSearchResults,
    searchTerm,
    filterTerm,
    sort,
    sortableFields,
    viewFilters,
    viewGroups,
    filter,
    group,
    viewStyle
  };
}
const mapDispatchToProps = {
  sortByField: _entries.sortByField,
  filterByField: _entries.filterByField,
  changeViewStyle: _entries.changeViewStyle,
  groupByField: _entries.groupByField
};
function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread({}, stateProps), ownProps), {}, {
    onSortClick: (key, direction) => dispatchProps.sortByField(stateProps.collection, key, direction),
    onFilterClick: filter => dispatchProps.filterByField(stateProps.collection, filter),
    onGroupClick: group => dispatchProps.groupByField(stateProps.collection, group),
    onChangeViewStyle: viewStyle => dispatchProps.changeViewStyle(viewStyle)
  });
}
const ConnectedCollection = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(Collection);
var _default = exports.default = (0, _reactPolyglot.translate)()(ConnectedCollection);