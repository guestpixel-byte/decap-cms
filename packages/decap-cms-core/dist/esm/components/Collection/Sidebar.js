"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Sidebar = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _reactPolyglot = require("react-polyglot");
var _reactRouterDom = require("react-router-dom");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _collections = require("../../actions/collections");
var _CollectionSearch = _interopRequireDefault(require("./CollectionSearch"));
var _NestedCollection = _interopRequireDefault(require("./NestedCollection"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const styles = {
  sidebarNavLinkActive: process.env.NODE_ENV === "production" ? {
    name: "rby5h3-sidebarNavLinkActive",
    styles: "color:#fff;background-color:#1e242c;border-left-color:#32e6e2;font-size:1rem;label:sidebarNavLinkActive;"
  } : {
    name: "rby5h3-sidebarNavLinkActive",
    styles: "color:#fff;background-color:#1e242c;border-left-color:#32e6e2;font-size:1rem;label:sidebarNavLinkActive;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjMkIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29sbGVjdGlvbi9TaWRlYmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJy4uLy4uL2FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyNDJjO1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjMzJlNmUyO1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgYCxcbn07XG5cbmNvbnN0IFNlYXJjaENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlLCB2aXNpYmlsaXR5IDAuM3MgZWFzZTtcbiAgXG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgbWF4LXdpZHRoOiAzMDBweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDhweCAwIDEycHg7XG4gIHBhZGRpbmctYm90dG9tOiAxLjVyZW07XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzEyMTgxZjtcblxuICAmLmNvbGxhcHNlZCB7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgcGFkZGluZzogLjI1cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cblxuICAgIGgyLCB1bCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgICR7U2VhcmNoQ29udGFpbmVyfSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgU2lkZWJhckhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMjJweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbGluZS1oZWlnaHQ6IDM3cHg7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMTBweCAyMHB4O1xuICBjb2xvcjogI2ZmZjtcbmA7XG5cbmNvbnN0IENvbGxhcHNlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjMTIxODFmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const SearchContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1t18l345",
  label: "SearchContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1mkhu8f",
  styles: "transition:opacity 0.3s ease,visibility 0.3s ease;&.hidden{display:none;}"
} : {
  name: "1mkhu8f",
  styles: "transition:opacity 0.3s ease,visibility 0.3s ease;&.hidden{display:none;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQmtDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SidebarContainer = /*#__PURE__*/(0, _base.default)("aside", {
  target: "e1t18l344",
  label: "SidebarContainer"
})(_decapCmsUiDefault.components.card, ";max-width:300px;width:100%;padding:8px 0 12px;padding-bottom:1.5rem;height:fit-content;display:flex;flex-direction:column;transition:width 0.3s ease;background-color:#12181f;&.collapsed{width:60px;padding:.25rem;display:flex;justify-content:center;h2,ul{display:none;}", SearchContainer, "{opacity:0;visibility:hidden;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErQnFDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */"));
const SidebarHeading = /*#__PURE__*/(0, _base.default)("h2", {
  target: "e1t18l343",
  label: "SidebarHeading"
})(process.env.NODE_ENV === "production" ? {
  name: "1w25mkt",
  styles: "font-size:22px;font-weight:600;line-height:37px;padding:0;margin:10px 20px;color:#fff"
} : {
  name: "1w25mkt",
  styles: "font-size:22px;font-weight:600;line-height:37px;padding:0;margin:10px 20px;color:#fff",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RGdDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CollapseButton = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1t18l342",
  label: "CollapseButton"
})(process.env.NODE_ENV === "production" ? {
  name: "2auqew",
  styles: "align-self:flex-end;margin-right:10px;background:none;border:none;cursor:pointer;font-size:18px;color:#fff"
} : {
  name: "2auqew",
  styles: "align-self:flex-end;margin-right:10px;background:none;border:none;cursor:pointer;font-size:18px;color:#fff",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzRW9DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SidebarNavList = /*#__PURE__*/(0, _base.default)("ul", {
  target: "e1t18l341",
  label: "SidebarNavList"
})(process.env.NODE_ENV === "production" ? {
  name: "14vcqsr",
  styles: "margin:12px 0 0;list-style:none;overflow:auto"
} : {
  name: "14vcqsr",
  styles: "margin:12px 0 0;list-style:none;overflow:auto",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnRmdDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SidebarNavLink = /*#__PURE__*/(0, _base.default)(_reactRouterDom.NavLink, {
  target: "e1t18l340",
  label: "SidebarNavLink"
})("display:flex;font-size:14px;font-weight:500;align-items:center;padding:8px 18px;border-left:2px solid #12181f;z-index:-1;", _decapCmsUiDefault.Icon, "{margin-right:4px;flex-shrink:0;}", props => /*#__PURE__*/(0, _react2.css)("&:hover,&:active,&.", props.activeClassName, "{", styles.sidebarNavLinkActive, ";};label:SidebarNavLink;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvR2dCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzRnNDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjQyYztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzMyZTZlMjtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG4gIFxuXG4gICYuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFyQ29udGFpbmVyID0gc3R5bGVkLmFzaWRlYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIG1heC13aWR0aDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjE4MWY7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIHBhZGRpbmc6IC4yNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAjZmZmO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTJweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDE4cHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzEyMTgxZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBpc1NlYXJjaEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbGxhcHNlZDogd2luZG93LmlubmVyV2lkdGggPCA3NjgsIC8vIENvbGxhcHNlIGlmIHNjcmVlbiB3aWR0aCBpcyBsZXNzIHRoYW4gNzY4cHhcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hvdWxkQ29sbGFwc2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2UgIT09IHRoaXMuc3RhdGUuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGlzQ29sbGFwc2VkOiAhcHJldlN0YXRlLmlzQ29sbGFwc2VkIH0pKTtcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTZWFyY2hFbmFibGVkLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGViYXJDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJyd9PlxuICAgICAgICA8Q29sbGFwc2VCdXR0b24gb25DbGljaz17dGhpcy50b2dnbGVDb2xsYXBzZX0+XG4gICAgICAgICAge2lzQ29sbGFwc2VkID8gJ+KGkicgOiAn4oaQJ31cbiAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8U2VhcmNoQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnaGlkZGVuJyA6ICcnfT5cbiAgICAgICAgICB7aXNTZWFyY2hFbmFibGVkICYmIChcbiAgICAgICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NlYXJjaENvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJOYXZMaXN0PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiB0aGlzLnJlbmRlckxpbmsoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaXN0PlxuICAgICAgPC9TaWRlYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoU2lkZWJhcik7XG4iXX0= */"));
class Sidebar extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "handleResize", () => {
      const shouldCollapse = window.innerWidth < 768;
      if (shouldCollapse !== this.state.isCollapsed) {
        this.setState({
          isCollapsed: shouldCollapse
        });
      }
    });
    _defineProperty(this, "toggleCollapse", () => {
      this.setState(prevState => ({
        isCollapsed: !prevState.isCollapsed
      }));
    });
    _defineProperty(this, "renderLink", (collection, filterTerm) => {
      const collectionName = collection.get('name');
      if (collection.has('nested')) {
        return (0, _react2.jsx)("li", {
          key: collectionName
        }, (0, _react2.jsx)(_NestedCollection.default, {
          collection: collection,
          filterTerm: filterTerm,
          "data-testid": collectionName
        }));
      }
      return (0, _react2.jsx)("li", {
        key: collectionName
      }, (0, _react2.jsx)(SidebarNavLink, {
        to: `/collections/${collectionName}`,
        activeClassName: "sidebar-active",
        "data-testid": collectionName
      }, (0, _react2.jsx)(_decapCmsUiDefault.Icon, {
        type: "write"
      }), collection.get('label')));
    });
    this.state = {
      isCollapsed: window.innerWidth < 768 // Collapse if screen width is less than 768px
    };
  }
  componentDidMount() {
    window.addEventListener('resize', this.handleResize);
  }
  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  }
  render() {
    const {
      collections,
      collection,
      isSearchEnabled,
      searchTerm,
      t,
      filterTerm
    } = this.props;
    const {
      isCollapsed
    } = this.state;
    return (0, _react2.jsx)(SidebarContainer, {
      className: isCollapsed ? 'collapsed' : ''
    }, (0, _react2.jsx)(CollapseButton, {
      onClick: this.toggleCollapse
    }, isCollapsed ? '→' : '←'), (0, _react2.jsx)(SidebarHeading, null, t('collection.sidebar.collections')), (0, _react2.jsx)(SearchContainer, {
      className: isCollapsed ? 'hidden' : ''
    }, isSearchEnabled && (0, _react2.jsx)(_CollectionSearch.default, {
      searchTerm: searchTerm,
      collections: collections,
      collection: collection,
      onSubmit: (query, collection) => (0, _collections.searchCollections)(query, collection)
    })), (0, _react2.jsx)(SidebarNavList, null, collections.toList().filter(collection => collection.get('hide') !== true).map(collection => this.renderLink(collection, filterTerm))));
  }
}
exports.Sidebar = Sidebar;
_defineProperty(Sidebar, "propTypes", {
  collections: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map,
  isSearchEnabled: _propTypes.default.bool,
  searchTerm: _propTypes.default.string,
  filterTerm: _propTypes.default.string,
  t: _propTypes.default.func.isRequired
});
var _default = exports.default = (0, _reactPolyglot.translate)()(Sidebar);