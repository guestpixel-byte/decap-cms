"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Sidebar = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _reactPolyglot = require("react-polyglot");
var _reactRouterDom = require("react-router-dom");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _collections = require("../../actions/collections");
var _CollectionSearch = _interopRequireDefault(require("./CollectionSearch"));
var _NestedCollection = _interopRequireDefault(require("./NestedCollection"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const styles = {
  sidebarNavLinkActive: /*#__PURE__*/(0, _react2.css)("color:", _decapCmsUiDefault.colors.active, ";background-color:", _decapCmsUiDefault.colors.activeBackground, ";border-left-color:#4863c6;;label:sidebarNavLinkActive;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjMkIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29sbGVjdGlvbi9TaWRlYmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJy4uLy4uL2FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmVCYWNrZ3JvdW5kfTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzQ4NjNjNjtcbiAgYCxcbn07XG5cbmNvbnN0IFNlYXJjaENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlLCB2aXNpYmlsaXR5IDAuM3MgZWFzZTtcblxuICAmLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuYDtcblxuY29uc3QgU2lkZWJhckNvbnRhaW5lciA9IHN0eWxlZC5hc2lkZWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICB3aWR0aDogMjUwcHg7XG4gIHBhZGRpbmc6IDhweCAwIDEycHg7XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZTtcblxuICAmLmNvbGxhcHNlZCB7XG4gICAgd2lkdGg6IDYwcHg7XG5cbiAgICBoMiwgdWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAke1NlYXJjaENvbnRhaW5lcn0ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDEwcHggMjBweDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbmA7XG5cbmNvbnN0IENvbGxhcHNlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbmA7XG5cbmNvbnN0IFNpZGViYXJOYXZMaXN0ID0gc3R5bGVkLnVsYFxuICBtYXJnaW46IDEycHggMCAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBvdmVyZmxvdzogYXV0bztcbmA7XG5cbmNvbnN0IFNpZGViYXJOYXZMaW5rID0gc3R5bGVkKE5hdkxpbmspYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDhweCAxOHB4O1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICNmZmY7XG4gIHotaW5kZXg6IC0xO1xuXG4gICR7SWNvbn0ge1xuICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICB9XG5cbiAgJHtwcm9wcyA9PiBjc3NgXG4gICAgJjpob3ZlcixcbiAgICAmOmFjdGl2ZSxcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5zaWRlYmFyTmF2TGlua0FjdGl2ZX07XG4gICAgfVxuICBgfTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBTaWRlYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgaXNTZWFyY2hFbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpbHRlclRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNDb2xsYXBzZWQ6IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4LCAvLyBDb2xsYXBzZSBpZiBzY3JlZW4gd2lkdGggaXMgbGVzcyB0aGFuIDc2OHB4XG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgIGNvbnN0IHNob3VsZENvbGxhcHNlID0gd2luZG93LmlubmVyV2lkdGggPCA3Njg7XG4gICAgaWYgKHNob3VsZENvbGxhcHNlICE9PSB0aGlzLnN0YXRlLmlzQ29sbGFwc2VkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNDb2xsYXBzZWQ6IHNob3VsZENvbGxhcHNlIH0pO1xuICAgIH1cbiAgfTtcblxuICB0b2dnbGVDb2xsYXBzZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoeyBpc0NvbGxhcHNlZDogIXByZXZTdGF0ZS5pc0NvbGxhcHNlZCB9KSk7XG4gIH07XG5cbiAgcmVuZGVyTGluayA9IChjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSA9PiB7XG4gICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uLmdldCgnbmFtZScpO1xuICAgIGlmIChjb2xsZWN0aW9uLmhhcygnbmVzdGVkJykpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgICA8TmVzdGVkQ29sbGVjdGlvblxuICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9saT5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgIDxTaWRlYmFyTmF2TGlua1xuICAgICAgICAgIHRvPXtgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbk5hbWV9YH1cbiAgICAgICAgICBhY3RpdmVDbGFzc05hbWU9XCJzaWRlYmFyLWFjdGl2ZVwiXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gdHlwZT1cIndyaXRlXCIgLz5cbiAgICAgICAgICB7Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpbms+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbnMsIGNvbGxlY3Rpb24sIGlzU2VhcmNoRW5hYmxlZCwgc2VhcmNoVGVybSwgdCwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTaWRlYmFyQ29udGFpbmVyIGNsYXNzTmFtZT17aXNDb2xsYXBzZWQgPyAnY29sbGFwc2VkJyA6ICcnfT5cbiAgICAgICAgPENvbGxhcHNlQnV0dG9uIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQ29sbGFwc2V9PlxuICAgICAgICAgIHtpc0NvbGxhcHNlZCA/ICfihpInIDogJ+KGkCd9XG4gICAgICAgIDwvQ29sbGFwc2VCdXR0b24+XG4gICAgICAgIDxTaWRlYmFySGVhZGluZz57dCgnY29sbGVjdGlvbi5zaWRlYmFyLmNvbGxlY3Rpb25zJyl9PC9TaWRlYmFySGVhZGluZz5cbiAgICAgICAgPFNlYXJjaENvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2hpZGRlbicgOiAnJ30+XG4gICAgICAgICAge2lzU2VhcmNoRW5hYmxlZCAmJiAoXG4gICAgICAgICAgICA8Q29sbGVjdGlvblNlYXJjaFxuICAgICAgICAgICAgICBzZWFyY2hUZXJtPXtzZWFyY2hUZXJtfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgIG9uU3VibWl0PXsocXVlcnksIGNvbGxlY3Rpb24pID0+IHNlYXJjaENvbGxlY3Rpb25zKHF1ZXJ5LCBjb2xsZWN0aW9uKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TZWFyY2hDb250YWluZXI+XG4gICAgICAgIDxTaWRlYmFyTmF2TGlzdD5cbiAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgLmZpbHRlcihjb2xsZWN0aW9uID0+IGNvbGxlY3Rpb24uZ2V0KCdoaWRlJykgIT09IHRydWUpXG4gICAgICAgICAgICAubWFwKGNvbGxlY3Rpb24gPT4gdGhpcy5yZW5kZXJMaW5rKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGlzdD5cbiAgICAgIDwvU2lkZWJhckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKFNpZGViYXIpO1xuIl19 */"))
};
const SearchContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1t18l345",
  label: "SearchContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1mkhu8f",
  styles: "transition:opacity 0.3s ease,visibility 0.3s ease;&.hidden{display:none;}"
} : {
  name: "1mkhu8f",
  styles: "transition:opacity 0.3s ease,visibility 0.3s ease;&.hidden{display:none;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQmtDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SidebarContainer = /*#__PURE__*/(0, _base.default)("aside", {
  target: "e1t18l344",
  label: "SidebarContainer"
})(_decapCmsUiDefault.components.card, ";width:250px;padding:8px 0 12px;height:fit-content;display:flex;flex-direction:column;transition:width 0.3s ease;&.collapsed{width:60px;h2,ul{display:none;}", SearchContainer, "{opacity:0;visibility:hidden;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2QnFDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));
const SidebarHeading = /*#__PURE__*/(0, _base.default)("h2", {
  target: "e1t18l343",
  label: "SidebarHeading"
})("font-size:22px;font-weight:600;line-height:37px;padding:0;margin:10px 20px;color:", _decapCmsUiDefault.colors.textLead, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvRGdDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));
const CollapseButton = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1t18l342",
  label: "CollapseButton"
})("align-self:flex-end;margin-right:10px;background:none;border:none;cursor:pointer;font-size:18px;color:", _decapCmsUiDefault.colors.textLead, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RG9DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));
const SidebarNavList = /*#__PURE__*/(0, _base.default)("ul", {
  target: "e1t18l341",
  label: "SidebarNavList"
})(process.env.NODE_ENV === "production" ? {
  name: "14vcqsr",
  styles: "margin:12px 0 0;list-style:none;overflow:auto"
} : {
  name: "14vcqsr",
  styles: "margin:12px 0 0;list-style:none;overflow:auto",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RWdDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SidebarNavLink = /*#__PURE__*/(0, _base.default)(_reactRouterDom.NavLink, {
  target: "e1t18l340",
  label: "SidebarNavLink"
})("display:flex;font-size:14px;font-weight:500;align-items:center;padding:8px 18px;border-left:2px solid #fff;z-index:-1;", _decapCmsUiDefault.Icon, "{margin-right:4px;flex-shrink:0;}", props => /*#__PURE__*/(0, _react2.css)("&:hover,&:active,&.", props.activeClassName, "{", styles.sidebarNavLinkActive, ";};label:SidebarNavLink;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRmdCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RXNDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEljb24sIGNvbXBvbmVudHMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgc2VhcmNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2NvbGxlY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uU2VhcmNoIGZyb20gJy4vQ29sbGVjdGlvblNlYXJjaCc7XG5pbXBvcnQgTmVzdGVkQ29sbGVjdGlvbiBmcm9tICcuL05lc3RlZENvbGxlY3Rpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNpZGViYXJOYXZMaW5rQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gIGAsXG59O1xuXG5jb25zdCBTZWFyY2hDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2U7XG5cbiAgJi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2U7XG5cbiAgJi5jb2xsYXBzZWQge1xuICAgIHdpZHRoOiA2MHB4O1xuXG4gICAgaDIsIHVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJHtTZWFyY2hDb250YWluZXJ9IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBsaW5lLWhlaWdodDogMzdweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAxMHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBDb2xsYXBzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6IDE4cHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMThweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGlzU2VhcmNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQ29sbGFwc2VkOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCwgLy8gQ29sbGFwc2UgaWYgc2NyZWVuIHdpZHRoIGlzIGxlc3MgdGhhbiA3NjhweFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4O1xuICAgIGlmIChzaG91bGRDb2xsYXBzZSAhPT0gdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgaXNDb2xsYXBzZWQ6ICFwcmV2U3RhdGUuaXNDb2xsYXBzZWQgfSkpO1xuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NlYXJjaEVuYWJsZWQsIHNlYXJjaFRlcm0sIHQsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lciBjbGFzc05hbWU9e2lzQ29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnJ30+XG4gICAgICAgIDxDb2xsYXBzZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlfT5cbiAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn4oaSJyA6ICfihpAnfVxuICAgICAgICA8L0NvbGxhcHNlQnV0dG9uPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxTZWFyY2hDb250YWluZXIgY2xhc3NOYW1lPXtpc0NvbGxhcHNlZCA/ICdoaWRkZW4nIDogJyd9PlxuICAgICAgICAgIHtpc1NlYXJjaEVuYWJsZWQgJiYgKFxuICAgICAgICAgICAgPENvbGxlY3Rpb25TZWFyY2hcbiAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU2VhcmNoQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));
class Sidebar extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "handleResize", () => {
      const shouldCollapse = window.innerWidth < 768;
      if (shouldCollapse !== this.state.isCollapsed) {
        this.setState({
          isCollapsed: shouldCollapse
        });
      }
    });
    _defineProperty(this, "toggleCollapse", () => {
      this.setState(prevState => ({
        isCollapsed: !prevState.isCollapsed
      }));
    });
    _defineProperty(this, "renderLink", (collection, filterTerm) => {
      const collectionName = collection.get('name');
      if (collection.has('nested')) {
        return (0, _react2.jsx)("li", {
          key: collectionName
        }, (0, _react2.jsx)(_NestedCollection.default, {
          collection: collection,
          filterTerm: filterTerm,
          "data-testid": collectionName
        }));
      }
      return (0, _react2.jsx)("li", {
        key: collectionName
      }, (0, _react2.jsx)(SidebarNavLink, {
        to: `/collections/${collectionName}`,
        activeClassName: "sidebar-active",
        "data-testid": collectionName
      }, (0, _react2.jsx)(_decapCmsUiDefault.Icon, {
        type: "write"
      }), collection.get('label')));
    });
    this.state = {
      isCollapsed: window.innerWidth < 768 // Collapse if screen width is less than 768px
    };
  }
  componentDidMount() {
    window.addEventListener('resize', this.handleResize);
  }
  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  }
  render() {
    const {
      collections,
      collection,
      isSearchEnabled,
      searchTerm,
      t,
      filterTerm
    } = this.props;
    const {
      isCollapsed
    } = this.state;
    return (0, _react2.jsx)(SidebarContainer, {
      className: isCollapsed ? 'collapsed' : ''
    }, (0, _react2.jsx)(CollapseButton, {
      onClick: this.toggleCollapse
    }, isCollapsed ? '→' : '←'), (0, _react2.jsx)(SidebarHeading, null, t('collection.sidebar.collections')), (0, _react2.jsx)(SearchContainer, {
      className: isCollapsed ? 'hidden' : ''
    }, isSearchEnabled && (0, _react2.jsx)(_CollectionSearch.default, {
      searchTerm: searchTerm,
      collections: collections,
      collection: collection,
      onSubmit: (query, collection) => (0, _collections.searchCollections)(query, collection)
    })), (0, _react2.jsx)(SidebarNavList, null, collections.toList().filter(collection => collection.get('hide') !== true).map(collection => this.renderLink(collection, filterTerm))));
  }
}
exports.Sidebar = Sidebar;
_defineProperty(Sidebar, "propTypes", {
  collections: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map,
  isSearchEnabled: _propTypes.default.bool,
  searchTerm: _propTypes.default.string,
  filterTerm: _propTypes.default.string,
  t: _propTypes.default.func.isRequired
});
var _default = exports.default = (0, _reactPolyglot.translate)()(Sidebar);