"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactPolyglot = require("react-polyglot");
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _reactTopbarProgressIndicator = _interopRequireDefault(require("react-topbar-progress-indicator"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _auth = require("../../actions/auth");
var _backend = require("../../backend");
var _collections = require("../../actions/collections");
var _mediaLibrary = require("../../actions/mediaLibrary");
var _MediaLibrary = _interopRequireDefault(require("../MediaLibrary/MediaLibrary"));
var _UI = require("../UI");
var _history = require("../../routing/history");
var _publishModes = require("../../constants/publishModes");
var _Collection = _interopRequireDefault(require("../Collection/Collection"));
var _Workflow = _interopRequireDefault(require("../Workflow/Workflow"));
var _Editor = _interopRequireDefault(require("../Editor/Editor"));
var _NotFoundPage = _interopRequireDefault(require("./NotFoundPage"));
var _Header = _interopRequireDefault(require("./Header"));
var _react2 = require("@emotion/react");
const _excluded = ["collections", "render"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
_reactTopbarProgressIndicator.default.config({
  barColors: {
    0: _decapCmsUiDefault.colors.active,
    '1.0': _decapCmsUiDefault.colors.active
  },
  shadowBlur: 0,
  barThickness: 2
});
const AppMainContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "eh2m33j2",
  label: "AppMainContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "zl1inp",
  styles: "display:flex;justify-content:center"
} : {
  name: "zl1inp",
  styles: "display:flex;justify-content:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9BcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUNtQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IFJvdXRlLCBTd2l0Y2gsIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgVG9wQmFyUHJvZ3Jlc3MgZnJvbSAncmVhY3QtdG9wYmFyLXByb2dyZXNzLWluZGljYXRvcic7XG5pbXBvcnQgeyBMb2FkZXIsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgbG9naW5Vc2VyLCBsb2dvdXRVc2VyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9hdXRoJztcbmltcG9ydCB7IGN1cnJlbnRCYWNrZW5kIH0gZnJvbSAnLi4vLi4vYmFja2VuZCc7XG5pbXBvcnQgeyBjcmVhdGVOZXdFbnRyeSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgb3Blbk1lZGlhTGlicmFyeSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvbWVkaWFMaWJyYXJ5JztcbmltcG9ydCBNZWRpYUxpYnJhcnkgZnJvbSAnLi4vTWVkaWFMaWJyYXJ5L01lZGlhTGlicmFyeSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zIH0gZnJvbSAnLi4vVUknO1xuaW1wb3J0IHsgaGlzdG9yeSB9IGZyb20gJy4uLy4uL3JvdXRpbmcvaGlzdG9yeSc7XG5pbXBvcnQgeyBTSU1QTEUsIEVESVRPUklBTF9XT1JLRkxPVyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi4vQ29sbGVjdGlvbi9Db2xsZWN0aW9uJztcbmltcG9ydCBXb3JrZmxvdyBmcm9tICcuLi9Xb3JrZmxvdy9Xb3JrZmxvdyc7XG5pbXBvcnQgRWRpdG9yIGZyb20gJy4uL0VkaXRvci9FZGl0b3InO1xuaW1wb3J0IE5vdEZvdW5kUGFnZSBmcm9tICcuL05vdEZvdW5kUGFnZSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyJztcblxuVG9wQmFyUHJvZ3Jlc3MuY29uZmlnKHtcbiAgYmFyQ29sb3JzOiB7XG4gICAgMDogY29sb3JzLmFjdGl2ZSxcbiAgICAnMS4wJzogY29sb3JzLmFjdGl2ZSxcbiAgfSxcbiAgc2hhZG93Qmx1cjogMCxcbiAgYmFyVGhpY2tuZXNzOiAyLFxufSk7XG5cbmNvbnN0IEFwcE1haW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcblxuY29uc3QgRXJyb3JDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW46IDIwcHg7XG5gO1xuXG5jb25zdCBFcnJvckNvZGVCbG9jayA9IHN0eWxlZC5wcmVgXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBmb250LXNpemU6IDE1cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG5gO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0UGF0aChjb2xsZWN0aW9ucykge1xuICBjb25zdCBmaXJzdCA9IGNvbGxlY3Rpb25zLmZpbHRlcihjb2xsZWN0aW9uID0+IGNvbGxlY3Rpb24uZ2V0KCdoaWRlJykgIT09IHRydWUpLmZpcnN0KCk7XG4gIGlmIChmaXJzdCkge1xuICAgIHJldHVybiBgL2NvbGxlY3Rpb25zLyR7Zmlyc3QuZ2V0KCduYW1lJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGEgbm9uIGhpZGRlbiBjb2xsZWN0aW9uJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gUm91dGVJbkNvbGxlY3Rpb24oeyBjb2xsZWN0aW9ucywgcmVuZGVyLCAuLi5wcm9wcyB9KSB7XG4gIGNvbnN0IGRlZmF1bHRQYXRoID0gZ2V0RGVmYXVsdFBhdGgoY29sbGVjdGlvbnMpO1xuICByZXR1cm4gKFxuICAgIDxSb3V0ZVxuICAgICAgey4uLnByb3BzfVxuICAgICAgcmVuZGVyPXtyb3V0ZVByb3BzID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbkV4aXN0cyA9IGNvbGxlY3Rpb25zLmdldChyb3V0ZVByb3BzLm1hdGNoLnBhcmFtcy5uYW1lKTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25FeGlzdHMgPyByZW5kZXIocm91dGVQcm9wcykgOiA8UmVkaXJlY3QgdG89e2RlZmF1bHRQYXRofSAvPjtcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn1cblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhdXRoOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBsb2dpblVzZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgbG9nb3V0VXNlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGlzRmV0Y2hpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgcHVibGlzaE1vZGU6IFByb3BUeXBlcy5vbmVPZihbU0lNUExFLCBFRElUT1JJQUxfV09SS0ZMT1ddKSxcbiAgICBzaXRlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdXNlTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dNZWRpYUJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb25maWdFcnJvcihjb25maWcpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5wcm9wcy50O1xuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JDb250YWluZXI+XG4gICAgICAgIDxoMT57dCgnYXBwLmFwcC5lcnJvckhlYWRlcicpfTwvaDE+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHN0cm9uZz57dCgnYXBwLmFwcC5jb25maWdFcnJvcnMnKX06PC9zdHJvbmc+XG4gICAgICAgICAgPEVycm9yQ29kZUJsb2NrPntjb25maWcuZXJyb3J9PC9FcnJvckNvZGVCbG9jaz5cbiAgICAgICAgICA8c3Bhbj57dCgnYXBwLmFwcC5jaGVja0NvbmZpZ1ltbCcpfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0Vycm9yQ29udGFpbmVyPlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVMb2dpbihjcmVkZW50aWFscykge1xuICAgIHRoaXMucHJvcHMubG9naW5Vc2VyKGNyZWRlbnRpYWxzKTtcbiAgfVxuXG4gIGF1dGhlbnRpY2F0aW5nKCkge1xuICAgIGNvbnN0IHsgYXV0aCwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYWNrZW5kID0gY3VycmVudEJhY2tlbmQodGhpcy5wcm9wcy5jb25maWcpO1xuXG4gICAgaWYgKGJhY2tlbmQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDE+e3QoJ2FwcC5hcHAud2FpdGluZ0JhY2tlbmQnKX08L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxOb3RpZmljYXRpb25zIC8+XG4gICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KGJhY2tlbmQuYXV0aENvbXBvbmVudCgpLCB7XG4gICAgICAgICAgb25Mb2dpbjogdGhpcy5oYW5kbGVMb2dpbi5iaW5kKHRoaXMpLFxuICAgICAgICAgIGVycm9yOiBhdXRoLmVycm9yLFxuICAgICAgICAgIGluUHJvZ3Jlc3M6IGF1dGguaXNGZXRjaGluZyxcbiAgICAgICAgICBzaXRlSWQ6IHRoaXMucHJvcHMuY29uZmlnLmJhY2tlbmQuc2l0ZV9kb21haW4sXG4gICAgICAgICAgYmFzZV91cmw6IHRoaXMucHJvcHMuY29uZmlnLmJhY2tlbmQuYmFzZV91cmwsXG4gICAgICAgICAgYXV0aEVuZHBvaW50OiB0aGlzLnByb3BzLmNvbmZpZy5iYWNrZW5kLmF1dGhfZW5kcG9pbnQsXG4gICAgICAgICAgY29uZmlnOiB0aGlzLnByb3BzLmNvbmZpZyxcbiAgICAgICAgICBjbGVhckhhc2g6ICgpID0+IGhpc3RvcnkucmVwbGFjZSgnLycpLFxuICAgICAgICAgIHQsXG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUxpbmtDbGljayhldmVudCwgaGFuZGxlciwgLi4uYXJncykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaGFuZGxlciguLi5hcmdzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgY29uZmlnLFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICBsb2dvdXRVc2VyLFxuICAgICAgaXNGZXRjaGluZyxcbiAgICAgIHB1Ymxpc2hNb2RlLFxuICAgICAgdXNlTWVkaWFMaWJyYXJ5LFxuICAgICAgb3Blbk1lZGlhTGlicmFyeSxcbiAgICAgIHQsXG4gICAgICBzaG93TWVkaWFCdXR0b24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY29uZmlnID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWdFcnJvcihjb25maWcpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuaXNGZXRjaGluZykge1xuICAgICAgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCdhcHAuYXBwLmxvYWRpbmdDb25maWcnKX08L0xvYWRlcj47XG4gICAgfVxuXG4gICAgaWYgKHVzZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXV0aGVudGljYXRpbmcodCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdFBhdGggPSBnZXREZWZhdWx0UGF0aChjb2xsZWN0aW9ucyk7XG4gICAgY29uc3QgaGFzV29ya2Zsb3cgPSBwdWJsaXNoTW9kZSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxOb3RpZmljYXRpb25zIC8+XG4gICAgICAgIDxIZWFkZXJcbiAgICAgICAgICB1c2VyPXt1c2VyfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2s9e2NyZWF0ZU5ld0VudHJ5fVxuICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e2xvZ291dFVzZXJ9XG4gICAgICAgICAgb3Blbk1lZGlhTGlicmFyeT17b3Blbk1lZGlhTGlicmFyeX1cbiAgICAgICAgICBoYXNXb3JrZmxvdz17aGFzV29ya2Zsb3d9XG4gICAgICAgICAgZGlzcGxheVVybD17Y29uZmlnLmRpc3BsYXlfdXJsfVxuICAgICAgICAgIGlzVGVzdFJlcG89e2NvbmZpZy5iYWNrZW5kLm5hbWUgPT09ICd0ZXN0LXJlcG8nfVxuICAgICAgICAgIHNob3dNZWRpYUJ1dHRvbj17c2hvd01lZGlhQnV0dG9ufVxuICAgICAgICAvPlxuICAgICAgICA8QXBwTWFpbkNvbnRhaW5lcj5cbiAgICAgICAgICB7aXNGZXRjaGluZyAmJiA8VG9wQmFyUHJvZ3Jlc3MgLz59XG4gICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgIDxSZWRpcmVjdCBleGFjdCBmcm9tPVwiL1wiIHRvPXtkZWZhdWx0UGF0aH0gLz5cbiAgICAgICAgICAgIDxSZWRpcmVjdCBleGFjdCBmcm9tPVwiL3NlYXJjaC9cIiB0bz17ZGVmYXVsdFBhdGh9IC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgZXhhY3RcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL3NlYXJjaC9cIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IG1hdGNoIH0pID0+IDxSZWRpcmVjdCB0bz17YC9jb2xsZWN0aW9ucy8ke21hdGNoLnBhcmFtcy5uYW1lfWB9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSZWRpcmVjdFxuICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgb24gSWRlbnRpdHkgKyBJbnZpdGUgT25seSArIEV4dGVybmFsIFByb3ZpZGVyIGVtYWlsIG5vdCBtYXRjaGluZ1xuICAgICAgICAgICAgICAvLyB0aGUgcmVnaXN0ZXJlZCB1c2VyXG4gICAgICAgICAgICAgIGZyb209XCIvZXJyb3I9YWNjZXNzX2RlbmllZCZlcnJvcl9kZXNjcmlwdGlvbj1TaWdudXBzK25vdCthbGxvd2VkK2Zvcit0aGlzK2luc3RhbmNlXCJcbiAgICAgICAgICAgICAgdG89e2RlZmF1bHRQYXRofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvdyA/IDxSb3V0ZSBwYXRoPVwiL3dvcmtmbG93XCIgY29tcG9uZW50PXtXb3JrZmxvd30gLz4gOiBudWxsfVxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIGV4YWN0XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZVwiXG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPENvbGxlY3Rpb24gey4uLnByb3BzfSAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9uZXdcIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPEVkaXRvciB7Li4ucHJvcHN9IG5ld1JlY29yZCAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9lbnRyaWVzLypcIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPEVkaXRvciB7Li4ucHJvcHN9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL3NlYXJjaC86c2VhcmNoVGVybVwiXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8Q29sbGVjdGlvbiB7Li4ucHJvcHN9IGlzU2VhcmNoUmVzdWx0cyBpc1NpbmdsZVNlYXJjaFJlc3VsdCAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL2ZpbHRlci86ZmlsdGVyVGVybSpcIlxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxDb2xsZWN0aW9uIHsuLi5wcm9wc30gLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlXG4gICAgICAgICAgICAgIHBhdGg9XCIvc2VhcmNoLzpzZWFyY2hUZXJtXCJcbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8Q29sbGVjdGlvbiB7Li4ucHJvcHN9IGlzU2VhcmNoUmVzdWx0cyAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9lZGl0LzpuYW1lLzplbnRyeU5hbWVcIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgZW50cnlOYW1lIH0gPSBtYXRjaC5wYXJhbXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz17YC9jb2xsZWN0aW9ucy8ke25hbWV9L2VudHJpZXMvJHtlbnRyeU5hbWV9YH0gLz47XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlIGNvbXBvbmVudD17Tm90Rm91bmRQYWdlfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgIHt1c2VNZWRpYUxpYnJhcnkgPyA8TWVkaWFMaWJyYXJ5IC8+IDogbnVsbH1cbiAgICAgICAgPC9BcHBNYWluQ29udGFpbmVyPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBhdXRoLCBjb25maWcsIGNvbGxlY3Rpb25zLCBnbG9iYWxVSSwgbWVkaWFMaWJyYXJ5IH0gPSBzdGF0ZTtcbiAgY29uc3QgdXNlciA9IGF1dGgudXNlcjtcbiAgY29uc3QgaXNGZXRjaGluZyA9IGdsb2JhbFVJLmlzRmV0Y2hpbmc7XG4gIGNvbnN0IHB1Ymxpc2hNb2RlID0gY29uZmlnLnB1Ymxpc2hfbW9kZTtcbiAgY29uc3QgdXNlTWVkaWFMaWJyYXJ5ID0gIW1lZGlhTGlicmFyeS5nZXQoJ2V4dGVybmFsTGlicmFyeScpO1xuICBjb25zdCBzaG93TWVkaWFCdXR0b24gPSBtZWRpYUxpYnJhcnkuZ2V0KCdzaG93TWVkaWFCdXR0b24nKTtcbiAgcmV0dXJuIHtcbiAgICBhdXRoLFxuICAgIGNvbmZpZyxcbiAgICBjb2xsZWN0aW9ucyxcbiAgICB1c2VyLFxuICAgIGlzRmV0Y2hpbmcsXG4gICAgcHVibGlzaE1vZGUsXG4gICAgc2hvd01lZGlhQnV0dG9uLFxuICAgIHVzZU1lZGlhTGlicmFyeSxcbiAgfTtcbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBvcGVuTWVkaWFMaWJyYXJ5LFxuICBsb2dpblVzZXIsXG4gIGxvZ291dFVzZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKSh0cmFuc2xhdGUoKShBcHApKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "eh2m33j1",
  label: "ErrorContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "3zy121",
  styles: "margin:20px"
} : {
  name: "3zy121",
  styles: "margin:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorCodeBlock = /*#__PURE__*/(0, _base.default)("pre", {
  target: "eh2m33j0",
  label: "ErrorCodeBlock"
})(process.env.NODE_ENV === "production" ? {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5"
} : {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9BcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkNpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IFJvdXRlLCBTd2l0Y2gsIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgVG9wQmFyUHJvZ3Jlc3MgZnJvbSAncmVhY3QtdG9wYmFyLXByb2dyZXNzLWluZGljYXRvcic7XG5pbXBvcnQgeyBMb2FkZXIsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgbG9naW5Vc2VyLCBsb2dvdXRVc2VyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9hdXRoJztcbmltcG9ydCB7IGN1cnJlbnRCYWNrZW5kIH0gZnJvbSAnLi4vLi4vYmFja2VuZCc7XG5pbXBvcnQgeyBjcmVhdGVOZXdFbnRyeSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgb3Blbk1lZGlhTGlicmFyeSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvbWVkaWFMaWJyYXJ5JztcbmltcG9ydCBNZWRpYUxpYnJhcnkgZnJvbSAnLi4vTWVkaWFMaWJyYXJ5L01lZGlhTGlicmFyeSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zIH0gZnJvbSAnLi4vVUknO1xuaW1wb3J0IHsgaGlzdG9yeSB9IGZyb20gJy4uLy4uL3JvdXRpbmcvaGlzdG9yeSc7XG5pbXBvcnQgeyBTSU1QTEUsIEVESVRPUklBTF9XT1JLRkxPVyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi4vQ29sbGVjdGlvbi9Db2xsZWN0aW9uJztcbmltcG9ydCBXb3JrZmxvdyBmcm9tICcuLi9Xb3JrZmxvdy9Xb3JrZmxvdyc7XG5pbXBvcnQgRWRpdG9yIGZyb20gJy4uL0VkaXRvci9FZGl0b3InO1xuaW1wb3J0IE5vdEZvdW5kUGFnZSBmcm9tICcuL05vdEZvdW5kUGFnZSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyJztcblxuVG9wQmFyUHJvZ3Jlc3MuY29uZmlnKHtcbiAgYmFyQ29sb3JzOiB7XG4gICAgMDogY29sb3JzLmFjdGl2ZSxcbiAgICAnMS4wJzogY29sb3JzLmFjdGl2ZSxcbiAgfSxcbiAgc2hhZG93Qmx1cjogMCxcbiAgYmFyVGhpY2tuZXNzOiAyLFxufSk7XG5cbmNvbnN0IEFwcE1haW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcblxuY29uc3QgRXJyb3JDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW46IDIwcHg7XG5gO1xuXG5jb25zdCBFcnJvckNvZGVCbG9jayA9IHN0eWxlZC5wcmVgXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBmb250LXNpemU6IDE1cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG5gO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0UGF0aChjb2xsZWN0aW9ucykge1xuICBjb25zdCBmaXJzdCA9IGNvbGxlY3Rpb25zLmZpbHRlcihjb2xsZWN0aW9uID0+IGNvbGxlY3Rpb24uZ2V0KCdoaWRlJykgIT09IHRydWUpLmZpcnN0KCk7XG4gIGlmIChmaXJzdCkge1xuICAgIHJldHVybiBgL2NvbGxlY3Rpb25zLyR7Zmlyc3QuZ2V0KCduYW1lJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGEgbm9uIGhpZGRlbiBjb2xsZWN0aW9uJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gUm91dGVJbkNvbGxlY3Rpb24oeyBjb2xsZWN0aW9ucywgcmVuZGVyLCAuLi5wcm9wcyB9KSB7XG4gIGNvbnN0IGRlZmF1bHRQYXRoID0gZ2V0RGVmYXVsdFBhdGgoY29sbGVjdGlvbnMpO1xuICByZXR1cm4gKFxuICAgIDxSb3V0ZVxuICAgICAgey4uLnByb3BzfVxuICAgICAgcmVuZGVyPXtyb3V0ZVByb3BzID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbkV4aXN0cyA9IGNvbGxlY3Rpb25zLmdldChyb3V0ZVByb3BzLm1hdGNoLnBhcmFtcy5uYW1lKTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25FeGlzdHMgPyByZW5kZXIocm91dGVQcm9wcykgOiA8UmVkaXJlY3QgdG89e2RlZmF1bHRQYXRofSAvPjtcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn1cblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhdXRoOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBsb2dpblVzZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgbG9nb3V0VXNlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGlzRmV0Y2hpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgcHVibGlzaE1vZGU6IFByb3BUeXBlcy5vbmVPZihbU0lNUExFLCBFRElUT1JJQUxfV09SS0ZMT1ddKSxcbiAgICBzaXRlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdXNlTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dNZWRpYUJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb25maWdFcnJvcihjb25maWcpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5wcm9wcy50O1xuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JDb250YWluZXI+XG4gICAgICAgIDxoMT57dCgnYXBwLmFwcC5lcnJvckhlYWRlcicpfTwvaDE+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHN0cm9uZz57dCgnYXBwLmFwcC5jb25maWdFcnJvcnMnKX06PC9zdHJvbmc+XG4gICAgICAgICAgPEVycm9yQ29kZUJsb2NrPntjb25maWcuZXJyb3J9PC9FcnJvckNvZGVCbG9jaz5cbiAgICAgICAgICA8c3Bhbj57dCgnYXBwLmFwcC5jaGVja0NvbmZpZ1ltbCcpfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0Vycm9yQ29udGFpbmVyPlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVMb2dpbihjcmVkZW50aWFscykge1xuICAgIHRoaXMucHJvcHMubG9naW5Vc2VyKGNyZWRlbnRpYWxzKTtcbiAgfVxuXG4gIGF1dGhlbnRpY2F0aW5nKCkge1xuICAgIGNvbnN0IHsgYXV0aCwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYWNrZW5kID0gY3VycmVudEJhY2tlbmQodGhpcy5wcm9wcy5jb25maWcpO1xuXG4gICAgaWYgKGJhY2tlbmQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDE+e3QoJ2FwcC5hcHAud2FpdGluZ0JhY2tlbmQnKX08L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxOb3RpZmljYXRpb25zIC8+XG4gICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KGJhY2tlbmQuYXV0aENvbXBvbmVudCgpLCB7XG4gICAgICAgICAgb25Mb2dpbjogdGhpcy5oYW5kbGVMb2dpbi5iaW5kKHRoaXMpLFxuICAgICAgICAgIGVycm9yOiBhdXRoLmVycm9yLFxuICAgICAgICAgIGluUHJvZ3Jlc3M6IGF1dGguaXNGZXRjaGluZyxcbiAgICAgICAgICBzaXRlSWQ6IHRoaXMucHJvcHMuY29uZmlnLmJhY2tlbmQuc2l0ZV9kb21haW4sXG4gICAgICAgICAgYmFzZV91cmw6IHRoaXMucHJvcHMuY29uZmlnLmJhY2tlbmQuYmFzZV91cmwsXG4gICAgICAgICAgYXV0aEVuZHBvaW50OiB0aGlzLnByb3BzLmNvbmZpZy5iYWNrZW5kLmF1dGhfZW5kcG9pbnQsXG4gICAgICAgICAgY29uZmlnOiB0aGlzLnByb3BzLmNvbmZpZyxcbiAgICAgICAgICBjbGVhckhhc2g6ICgpID0+IGhpc3RvcnkucmVwbGFjZSgnLycpLFxuICAgICAgICAgIHQsXG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUxpbmtDbGljayhldmVudCwgaGFuZGxlciwgLi4uYXJncykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaGFuZGxlciguLi5hcmdzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgY29uZmlnLFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICBsb2dvdXRVc2VyLFxuICAgICAgaXNGZXRjaGluZyxcbiAgICAgIHB1Ymxpc2hNb2RlLFxuICAgICAgdXNlTWVkaWFMaWJyYXJ5LFxuICAgICAgb3Blbk1lZGlhTGlicmFyeSxcbiAgICAgIHQsXG4gICAgICBzaG93TWVkaWFCdXR0b24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY29uZmlnID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWdFcnJvcihjb25maWcpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuaXNGZXRjaGluZykge1xuICAgICAgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCdhcHAuYXBwLmxvYWRpbmdDb25maWcnKX08L0xvYWRlcj47XG4gICAgfVxuXG4gICAgaWYgKHVzZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXV0aGVudGljYXRpbmcodCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdFBhdGggPSBnZXREZWZhdWx0UGF0aChjb2xsZWN0aW9ucyk7XG4gICAgY29uc3QgaGFzV29ya2Zsb3cgPSBwdWJsaXNoTW9kZSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxOb3RpZmljYXRpb25zIC8+XG4gICAgICAgIDxIZWFkZXJcbiAgICAgICAgICB1c2VyPXt1c2VyfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2s9e2NyZWF0ZU5ld0VudHJ5fVxuICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e2xvZ291dFVzZXJ9XG4gICAgICAgICAgb3Blbk1lZGlhTGlicmFyeT17b3Blbk1lZGlhTGlicmFyeX1cbiAgICAgICAgICBoYXNXb3JrZmxvdz17aGFzV29ya2Zsb3d9XG4gICAgICAgICAgZGlzcGxheVVybD17Y29uZmlnLmRpc3BsYXlfdXJsfVxuICAgICAgICAgIGlzVGVzdFJlcG89e2NvbmZpZy5iYWNrZW5kLm5hbWUgPT09ICd0ZXN0LXJlcG8nfVxuICAgICAgICAgIHNob3dNZWRpYUJ1dHRvbj17c2hvd01lZGlhQnV0dG9ufVxuICAgICAgICAvPlxuICAgICAgICA8QXBwTWFpbkNvbnRhaW5lcj5cbiAgICAgICAgICB7aXNGZXRjaGluZyAmJiA8VG9wQmFyUHJvZ3Jlc3MgLz59XG4gICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgIDxSZWRpcmVjdCBleGFjdCBmcm9tPVwiL1wiIHRvPXtkZWZhdWx0UGF0aH0gLz5cbiAgICAgICAgICAgIDxSZWRpcmVjdCBleGFjdCBmcm9tPVwiL3NlYXJjaC9cIiB0bz17ZGVmYXVsdFBhdGh9IC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgZXhhY3RcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL3NlYXJjaC9cIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IG1hdGNoIH0pID0+IDxSZWRpcmVjdCB0bz17YC9jb2xsZWN0aW9ucy8ke21hdGNoLnBhcmFtcy5uYW1lfWB9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSZWRpcmVjdFxuICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgb24gSWRlbnRpdHkgKyBJbnZpdGUgT25seSArIEV4dGVybmFsIFByb3ZpZGVyIGVtYWlsIG5vdCBtYXRjaGluZ1xuICAgICAgICAgICAgICAvLyB0aGUgcmVnaXN0ZXJlZCB1c2VyXG4gICAgICAgICAgICAgIGZyb209XCIvZXJyb3I9YWNjZXNzX2RlbmllZCZlcnJvcl9kZXNjcmlwdGlvbj1TaWdudXBzK25vdCthbGxvd2VkK2Zvcit0aGlzK2luc3RhbmNlXCJcbiAgICAgICAgICAgICAgdG89e2RlZmF1bHRQYXRofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvdyA/IDxSb3V0ZSBwYXRoPVwiL3dvcmtmbG93XCIgY29tcG9uZW50PXtXb3JrZmxvd30gLz4gOiBudWxsfVxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIGV4YWN0XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZVwiXG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPENvbGxlY3Rpb24gey4uLnByb3BzfSAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9uZXdcIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPEVkaXRvciB7Li4ucHJvcHN9IG5ld1JlY29yZCAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9lbnRyaWVzLypcIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPEVkaXRvciB7Li4ucHJvcHN9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL3NlYXJjaC86c2VhcmNoVGVybVwiXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8Q29sbGVjdGlvbiB7Li4ucHJvcHN9IGlzU2VhcmNoUmVzdWx0cyBpc1NpbmdsZVNlYXJjaFJlc3VsdCAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL2ZpbHRlci86ZmlsdGVyVGVybSpcIlxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxDb2xsZWN0aW9uIHsuLi5wcm9wc30gLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlXG4gICAgICAgICAgICAgIHBhdGg9XCIvc2VhcmNoLzpzZWFyY2hUZXJtXCJcbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8Q29sbGVjdGlvbiB7Li4ucHJvcHN9IGlzU2VhcmNoUmVzdWx0cyAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9lZGl0LzpuYW1lLzplbnRyeU5hbWVcIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgZW50cnlOYW1lIH0gPSBtYXRjaC5wYXJhbXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz17YC9jb2xsZWN0aW9ucy8ke25hbWV9L2VudHJpZXMvJHtlbnRyeU5hbWV9YH0gLz47XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlIGNvbXBvbmVudD17Tm90Rm91bmRQYWdlfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgIHt1c2VNZWRpYUxpYnJhcnkgPyA8TWVkaWFMaWJyYXJ5IC8+IDogbnVsbH1cbiAgICAgICAgPC9BcHBNYWluQ29udGFpbmVyPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBhdXRoLCBjb25maWcsIGNvbGxlY3Rpb25zLCBnbG9iYWxVSSwgbWVkaWFMaWJyYXJ5IH0gPSBzdGF0ZTtcbiAgY29uc3QgdXNlciA9IGF1dGgudXNlcjtcbiAgY29uc3QgaXNGZXRjaGluZyA9IGdsb2JhbFVJLmlzRmV0Y2hpbmc7XG4gIGNvbnN0IHB1Ymxpc2hNb2RlID0gY29uZmlnLnB1Ymxpc2hfbW9kZTtcbiAgY29uc3QgdXNlTWVkaWFMaWJyYXJ5ID0gIW1lZGlhTGlicmFyeS5nZXQoJ2V4dGVybmFsTGlicmFyeScpO1xuICBjb25zdCBzaG93TWVkaWFCdXR0b24gPSBtZWRpYUxpYnJhcnkuZ2V0KCdzaG93TWVkaWFCdXR0b24nKTtcbiAgcmV0dXJuIHtcbiAgICBhdXRoLFxuICAgIGNvbmZpZyxcbiAgICBjb2xsZWN0aW9ucyxcbiAgICB1c2VyLFxuICAgIGlzRmV0Y2hpbmcsXG4gICAgcHVibGlzaE1vZGUsXG4gICAgc2hvd01lZGlhQnV0dG9uLFxuICAgIHVzZU1lZGlhTGlicmFyeSxcbiAgfTtcbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBvcGVuTWVkaWFMaWJyYXJ5LFxuICBsb2dpblVzZXIsXG4gIGxvZ291dFVzZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKSh0cmFuc2xhdGUoKShBcHApKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function getDefaultPath(collections) {
  const first = collections.filter(collection => collection.get('hide') !== true).first();
  if (first) {
    return `/collections/${first.get('name')}`;
  } else {
    throw new Error('Could not find a non hidden collection');
  }
}
function RouteInCollection(_ref) {
  let {
      collections,
      render
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const defaultPath = getDefaultPath(collections);
  return (0, _react2.jsx)(_reactRouterDom.Route, _extends({}, props, {
    render: routeProps => {
      const collectionExists = collections.get(routeProps.match.params.name);
      return collectionExists ? render(routeProps) : (0, _react2.jsx)(_reactRouterDom.Redirect, {
        to: defaultPath
      });
    }
  }));
}
class App extends _react.default.Component {
  configError(config) {
    const t = this.props.t;
    return (0, _react2.jsx)(ErrorContainer, null, (0, _react2.jsx)("h1", null, t('app.app.errorHeader')), (0, _react2.jsx)("div", null, (0, _react2.jsx)("strong", null, t('app.app.configErrors'), ":"), (0, _react2.jsx)(ErrorCodeBlock, null, config.error), (0, _react2.jsx)("span", null, t('app.app.checkConfigYml'))));
  }
  handleLogin(credentials) {
    this.props.loginUser(credentials);
  }
  authenticating() {
    const {
      auth,
      t
    } = this.props;
    const backend = (0, _backend.currentBackend)(this.props.config);
    if (backend == null) {
      return (0, _react2.jsx)("div", null, (0, _react2.jsx)("h1", null, t('app.app.waitingBackend')));
    }
    return (0, _react2.jsx)("div", null, (0, _react2.jsx)(_UI.Notifications, null), /*#__PURE__*/_react.default.createElement(backend.authComponent(), {
      onLogin: this.handleLogin.bind(this),
      error: auth.error,
      inProgress: auth.isFetching,
      siteId: this.props.config.backend.site_domain,
      base_url: this.props.config.backend.base_url,
      authEndpoint: this.props.config.backend.auth_endpoint,
      config: this.props.config,
      clearHash: () => _history.history.replace('/'),
      t
    }));
  }
  handleLinkClick(event, handler, ...args) {
    event.preventDefault();
    handler(...args);
  }
  render() {
    const {
      user,
      config,
      collections,
      logoutUser,
      isFetching,
      publishMode,
      useMediaLibrary,
      openMediaLibrary,
      t,
      showMediaButton
    } = this.props;
    if (config === null) {
      return null;
    }
    if (config.error) {
      return this.configError(config);
    }
    if (config.isFetching) {
      return (0, _react2.jsx)(_decapCmsUiDefault.Loader, {
        active: true
      }, t('app.app.loadingConfig'));
    }
    if (user == null) {
      return this.authenticating(t);
    }
    const defaultPath = getDefaultPath(collections);
    const hasWorkflow = publishMode === _publishModes.EDITORIAL_WORKFLOW;
    return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_UI.Notifications, null), (0, _react2.jsx)(_Header.default, {
      user: user,
      collections: collections,
      onCreateEntryClick: _collections.createNewEntry,
      onLogoutClick: logoutUser,
      openMediaLibrary: openMediaLibrary,
      hasWorkflow: hasWorkflow,
      displayUrl: config.display_url,
      isTestRepo: config.backend.name === 'test-repo',
      showMediaButton: showMediaButton
    }), (0, _react2.jsx)(AppMainContainer, null, isFetching && (0, _react2.jsx)(_reactTopbarProgressIndicator.default, null), (0, _react2.jsx)(_reactRouterDom.Switch, null, (0, _react2.jsx)(_reactRouterDom.Redirect, {
      exact: true,
      from: "/",
      to: defaultPath
    }), (0, _react2.jsx)(_reactRouterDom.Redirect, {
      exact: true,
      from: "/search/",
      to: defaultPath
    }), (0, _react2.jsx)(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name/search/",
      render: ({
        match
      }) => (0, _react2.jsx)(_reactRouterDom.Redirect, {
        to: `/collections/${match.params.name}`
      })
    }), (0, _react2.jsx)(_reactRouterDom.Redirect
    // This happens on Identity + Invite Only + External Provider email not matching
    // the registered user
    , {
      from: "/error=access_denied&error_description=Signups+not+allowed+for+this+instance",
      to: defaultPath
    }), hasWorkflow ? (0, _react2.jsx)(_reactRouterDom.Route, {
      path: "/workflow",
      component: _Workflow.default
    }) : null, (0, _react2.jsx)(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name",
      render: props => (0, _react2.jsx)(_Collection.default, props)
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/new",
      collections: collections,
      render: props => (0, _react2.jsx)(_Editor.default, _extends({}, props, {
        newRecord: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/entries/*",
      collections: collections,
      render: props => (0, _react2.jsx)(_Editor.default, props)
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/search/:searchTerm",
      collections: collections,
      render: props => (0, _react2.jsx)(_Collection.default, _extends({}, props, {
        isSearchResults: true,
        isSingleSearchResult: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      collections: collections,
      path: "/collections/:name/filter/:filterTerm*",
      render: props => (0, _react2.jsx)(_Collection.default, props)
    }), (0, _react2.jsx)(_reactRouterDom.Route, {
      path: "/search/:searchTerm",
      render: props => (0, _react2.jsx)(_Collection.default, _extends({}, props, {
        isSearchResults: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/edit/:name/:entryName",
      collections: collections,
      render: ({
        match
      }) => {
        const {
          name,
          entryName
        } = match.params;
        return (0, _react2.jsx)(_reactRouterDom.Redirect, {
          to: `/collections/${name}/entries/${entryName}`
        });
      }
    }), (0, _react2.jsx)(_reactRouterDom.Route, {
      component: _NotFoundPage.default
    })), useMediaLibrary ? (0, _react2.jsx)(_MediaLibrary.default, null) : null));
  }
}
_defineProperty(App, "propTypes", {
  auth: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  loginUser: _propTypes.default.func.isRequired,
  logoutUser: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  isFetching: _propTypes.default.bool.isRequired,
  publishMode: _propTypes.default.oneOf([_publishModes.SIMPLE, _publishModes.EDITORIAL_WORKFLOW]),
  siteId: _propTypes.default.string,
  useMediaLibrary: _propTypes.default.bool,
  openMediaLibrary: _propTypes.default.func.isRequired,
  showMediaButton: _propTypes.default.bool,
  t: _propTypes.default.func.isRequired
});
function mapStateToProps(state) {
  const {
    auth,
    config,
    collections,
    globalUI,
    mediaLibrary
  } = state;
  const user = auth.user;
  const isFetching = globalUI.isFetching;
  const publishMode = config.publish_mode;
  const useMediaLibrary = !mediaLibrary.get('externalLibrary');
  const showMediaButton = mediaLibrary.get('showMediaButton');
  return {
    auth,
    config,
    collections,
    user,
    isFetching,
    publishMode,
    showMediaButton,
    useMediaLibrary
  };
}
const mapDispatchToProps = {
  openMediaLibrary: _mediaLibrary.openMediaLibrary,
  loginUser: _auth.loginUser,
  logoutUser: _auth.logoutUser
};
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactPolyglot.translate)()(App));