"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _reactPolyglot = require("react-polyglot");
var _reactRouterDom = require("react-router-dom");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _reactRedux = require("react-redux");
var _UI = require("../UI");
var _status = require("../../actions/status");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const styles = {
  buttonActive: /*#__PURE__*/(0, _react2.css)("color:", _decapCmsUiDefault.colors.active, ";;label:buttonActive;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
function AppHeader(props) {
  return (0, _react2.jsx)("header", _extends({
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.shadows.dropMain, ";position:sticky;width:100%;top:0;background-color:", _decapCmsUiDefault.colors.foreground, ";z-index:", _decapCmsUiDefault.zIndex.zIndex300, ";height:", _decapCmsUiDefault.lengths.topBarHeight, ";;label:AppHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, props));
}
const AppHeaderContent = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1rbzf6g7",
  label: "AppHeaderContent"
})(process.env.NODE_ENV === "production" ? {
  name: "11kjedp",
  styles: "display:flex;justify-content:space-between;min-width:800px;max-width:1440px;padding:0 12px;margin:0 auto;@media (max-width: 768px){min-width:100%;flex-direction:column;padding:0;position:relative;}"
} : {
  name: "11kjedp",
  styles: "display:flex;justify-content:space-between;min-width:800px;max-width:1440px;padding:0 12px;margin:0 auto;@media (max-width: 768px){min-width:100%;flex-direction:column;padding:0;position:relative;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderButton = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1rbzf6g6",
  label: "AppHeaderButton"
})(_decapCmsUiDefault.buttons.button, ";background:none;color:#7b8290;font-family:inherit;font-size:16px;font-weight:500;display:inline-flex;padding:16px 20px;align-items:center;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AppHeaderNavLink = AppHeaderButton.withComponent(_reactRouterDom.NavLink, {
  target: "e1rbzf6g8",
  label: "AppHeaderNavLink"
});
const AppHeaderActions = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1rbzf6g5",
  label: "AppHeaderActions"
})(process.env.NODE_ENV === "production" ? {
  name: "c119wk",
  styles: "display:inline-flex;align-items:center;@media (max-width: 768px){flex-direction:column;width:100%;align-items:stretch;}"
} : {
  name: "c119wk",
  styles: "display:inline-flex;align-items:center;@media (max-width: 768px){flex-direction:column;width:100%;align-items:stretch;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const HamburgerMenu = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1rbzf6g4",
  label: "HamburgerMenu"
})(process.env.NODE_ENV === "production" ? {
  name: "1ouspcc",
  styles: "display:none;@media (max-width: 768px){display:flex;flex-direction:column;justify-content:space-between;width:24px;height:20px;cursor:pointer;position:absolute;top:15px;right:15px;z-index:1000;}"
} : {
  name: "1ouspcc",
  styles: "display:none;@media (max-width: 768px){display:flex;flex-direction:column;justify-content:space-between;width:24px;height:20px;cursor:pointer;position:absolute;top:15px;right:15px;z-index:1000;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var _ref = process.env.NODE_ENV === "production" ? {
  name: "a181q1-HamburgerLine",
  styles: "&:nth-child(1){transform:rotate(45deg) translate(5px, 5px);}&:nth-child(2){opacity:0;}&:nth-child(3){transform:rotate(-45deg) translate(5px, -5px);};label:HamburgerLine;"
} : {
  name: "a181q1-HamburgerLine",
  styles: "&:nth-child(1){transform:rotate(45deg) translate(5px, 5px);}&:nth-child(2){opacity:0;}&:nth-child(3){transform:rotate(-45deg) translate(5px, -5px);};label:HamburgerLine;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkdnQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHtcbiAgRHJvcGRvd24sXG4gIERyb3Bkb3duSXRlbSxcbiAgU3R5bGVkRHJvcGRvd25CdXR0b24sXG4gIGNvbG9ycyxcbiAgbGVuZ3RocyxcbiAgc2hhZG93cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBTZXR0aW5nc0Ryb3Bkb3duIH0gZnJvbSAnLi4vVUknO1xuaW1wb3J0IHsgY2hlY2tCYWNrZW5kU3RhdHVzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zdGF0dXMnO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuZnVuY3Rpb24gQXBwSGVhZGVyKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGhlYWRlclxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgICR7c2hhZG93cy5kcm9wTWFpbn07XG4gICAgICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgICAgICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgzMDB9O1xuICAgICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgICAgYH1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5jb25zdCBBcHBIZWFkZXJDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgcGFkZGluZzogMCAxMnB4O1xuICBtYXJnaW46IDAgYXV0bztcblxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuYDtcblxuY29uc3QgQXBwSGVhZGVyQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGNvbG9yOiAjN2I4MjkwO1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgcGFkZGluZzogMTZweCAyMHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgfVxuYDtcblxuY29uc3QgSGFtYnVyZ2VyTWVudSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IG5vbmU7XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIHdpZHRoOiAyNHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTVweDtcbiAgICByaWdodDogMTVweDtcbiAgICB6LWluZGV4OiAxMDAwO1xuICB9XG5gO1xuXG5jb25zdCBIYW1idXJnZXJMaW5lID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAzcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2I4MjkwO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xuXG4gICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuICYmIGNzc2BcbiAgICAmOm50aC1jaGlsZCgxKSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDVweCwgNXB4KTtcbiAgICB9XG4gICAgJjpudGgtY2hpbGQoMikge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gICAgJjpudGgtY2hpbGQoMykge1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoNXB4LCAtNXB4KTtcbiAgICB9XG4gIGB9XG5gO1xuXG5jb25zdCBNb2JpbGVNZW51ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIGRpc3BsYXk6ICR7cHJvcHMgPT4gKHByb3BzLmlzT3BlbiA/ICdmbGV4JyA6ICdub25lJyl9O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTAwJTtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMSk7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcblxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cblxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgfVxuYDtcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgb25DcmVhdGVFbnRyeUNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3Blbk1lZGlhTGlicmFyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzVGVzdFJlcG86IFByb3BUeXBlcy5ib29sLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2hlY2tCYWNrZW5kU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dNZWRpYUJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaXNNb2JpbGVNZW51T3BlbjogZmFsc2VcbiAgfTtcblxuICBpbnRlcnZhbElkO1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuY2hlY2tCYWNrZW5kU3RhdHVzKCk7XG4gICAgfSwgNSAqIDYwICogMTAwMCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJZCk7XG4gIH1cblxuICB0b2dnbGVNb2JpbGVNZW51ID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XG4gICAgICBpc01vYmlsZU1lbnVPcGVuOiAhcHJldlN0YXRlLmlzTW9iaWxlTWVudU9wZW5cbiAgICB9KSk7XG4gIH07XG5cbiAgaGFuZGxlQ3JlYXRlUG9zdENsaWNrID0gY29sbGVjdGlvbk5hbWUgPT4ge1xuICAgIGNvbnN0IHsgb25DcmVhdGVFbnRyeUNsaWNrIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvbkNyZWF0ZUVudHJ5Q2xpY2spIHtcbiAgICAgIG9uQ3JlYXRlRW50cnlDbGljayhjb2xsZWN0aW9uTmFtZSk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNNb2JpbGVNZW51T3BlbjogZmFsc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyID0ge30sXG4gICAgICBjb2xsZWN0aW9ucyxcbiAgICAgIG9uTG9nb3V0Q2xpY2ssXG4gICAgICBvcGVuTWVkaWFMaWJyYXJ5LFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICBkaXNwbGF5VXJsLFxuICAgICAgaXNUZXN0UmVwbyxcbiAgICAgIHQsXG4gICAgICBzaG93TWVkaWFCdXR0b24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7IGlzTW9iaWxlTWVudU9wZW4gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBjcmVhdGFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxIYW1idXJnZXJNZW51IG9uQ2xpY2s9e3RoaXMudG9nZ2xlTW9iaWxlTWVudX0+XG4gICAgICAgICAgICA8SGFtYnVyZ2VyTGluZSBpc09wZW49e2lzTW9iaWxlTWVudU9wZW59IC8+XG4gICAgICAgICAgICA8SGFtYnVyZ2VyTGluZSBpc09wZW49e2lzTW9iaWxlTWVudU9wZW59IC8+XG4gICAgICAgICAgICA8SGFtYnVyZ2VyTGluZSBpc09wZW49e2lzTW9iaWxlTWVudU9wZW59IC8+XG4gICAgICAgICAgPC9IYW1idXJnZXJNZW51PlxuICAgICAgICAgIDxNb2JpbGVNZW51IGlzT3Blbj17aXNNb2JpbGVNZW51T3Blbn0+XG4gICAgICAgICAgICA8bmF2PlxuICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlua1xuICAgICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDbGFzc05hbWU9XCJoZWFkZXItbGluay1hY3RpdmVcIlxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17KG1hdGNoLCBsb2NhdGlvbikgPT4gbG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgnL2NvbGxlY3Rpb25zLycpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZU1vYmlsZU1lbnV9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHt0KCdhcHAuaGVhZGVyLmNvbnRlbnQnKX1cbiAgICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIHtoYXNXb3JrZmxvdyAmJiAoXG4gICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rIFxuICAgICAgICAgICAgICAgICAgICAgIHRvPVwiL3dvcmtmbG93XCIgXG4gICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZU1vYmlsZU1lbnV9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgICA8L0FwcEhlYWRlck5hdkxpbms+XG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge3Nob3dNZWRpYUJ1dHRvbiAmJiAoXG4gICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3Blbk1lZGlhTGlicmFyeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVNb2JpbGVNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHt0KCdhcHAuaGVhZGVyLm1lZGlhJyl9XG4gICAgICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0FwcEhlYWRlck5hdkxpc3Q+XG4gICAgICAgICAgICA8L25hdj5cbiAgICAgICAgICAgIDxBcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICAgICAgICB7Y3JlYXRhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjMwcHhcIlxuICAgICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7Y3JlYXRhYmxlQ29sbGVjdGlvbnMubWFwKGNvbGxlY3Rpb24gPT4gKFxuICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtjb2xsZWN0aW9uLmdldCgnbGFiZWxfc2luZ3VsYXInKSB8fCBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNyZWF0ZVBvc3RDbGljayhjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICAgICAgZGlzcGxheVVybD17ZGlzcGxheVVybH1cbiAgICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICAgIGltYWdlVXJsPXt1c2VyLmF2YXRhcl91cmx9XG4gICAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICA8L01vYmlsZU1lbnU+XG4gICAgICAgIDwvQXBwSGVhZGVyQ29udGVudD5cbiAgICAgIDwvQXBwSGVhZGVyPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBjaGVja0JhY2tlbmRTdGF0dXMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG51bGwsIG1hcERpc3BhdGNoVG9Qcm9wcykodHJhbnNsYXRlKCkoSGVhZGVyKSk7Il19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const HamburgerLine = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1rbzf6g3",
  label: "HamburgerLine"
})("height:3px;width:100%;background-color:#7b8290;transition:all 0.3s ease;", props => props.isOpen && _ref, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const MobileMenu = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1rbzf6g2",
  label: "MobileMenu"
})("display:flex;@media (max-width: 768px){display:", props => props.isOpen ? 'flex' : 'none', ";flex-direction:column;position:absolute;top:100%;left:0;width:100%;background-color:", _decapCmsUiDefault.colors.foreground, ";box-shadow:0 2px 4px rgba(0,0,0,0.1);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AppHeaderNavList = /*#__PURE__*/(0, _base.default)("ul", {
  target: "e1rbzf6g1",
  label: "AppHeaderNavList"
})(process.env.NODE_ENV === "production" ? {
  name: "4hoqtx",
  styles: "display:flex;margin:0;list-style:none;@media (max-width: 768px){flex-direction:column;width:100%;}"
} : {
  name: "4hoqtx",
  styles: "display:flex;margin:0;list-style:none;@media (max-width: 768px){flex-direction:column;width:100%;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderQuickNewButton = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.StyledDropdownButton, {
  target: "e1rbzf6g0",
  label: "AppHeaderQuickNewButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.buttons.medium, ";", _decapCmsUiDefault.buttons.gray, ";margin-right:8px;&:after{top:11px;}@media (max-width: 768px){width:100%;margin-right:0;margin-bottom:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class Header extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isMobileMenuOpen: false
    });
    _defineProperty(this, "intervalId", void 0);
    _defineProperty(this, "toggleMobileMenu", () => {
      this.setState(prevState => ({
        isMobileMenuOpen: !prevState.isMobileMenuOpen
      }));
    });
    _defineProperty(this, "handleCreatePostClick", collectionName => {
      const {
        onCreateEntryClick
      } = this.props;
      if (onCreateEntryClick) {
        onCreateEntryClick(collectionName);
        this.setState({
          isMobileMenuOpen: false
        });
      }
    });
  }
  componentDidMount() {
    this.intervalId = setInterval(() => {
      this.props.checkBackendStatus();
    }, 5 * 60 * 1000);
  }
  componentWillUnmount() {
    clearInterval(this.intervalId);
  }
  render() {
    const {
      user = {},
      collections,
      onLogoutClick,
      openMediaLibrary,
      hasWorkflow,
      displayUrl,
      isTestRepo,
      t,
      showMediaButton
    } = this.props;
    const {
      isMobileMenuOpen
    } = this.state;
    const creatableCollections = collections.filter(collection => collection.get('create')).toList();
    return (0, _react2.jsx)(AppHeader, null, (0, _react2.jsx)(AppHeaderContent, null, (0, _react2.jsx)(HamburgerMenu, {
      onClick: this.toggleMobileMenu
    }, (0, _react2.jsx)(HamburgerLine, {
      isOpen: isMobileMenuOpen
    }), (0, _react2.jsx)(HamburgerLine, {
      isOpen: isMobileMenuOpen
    }), (0, _react2.jsx)(HamburgerLine, {
      isOpen: isMobileMenuOpen
    })), (0, _react2.jsx)(MobileMenu, {
      isOpen: isMobileMenuOpen
    }, (0, _react2.jsx)("nav", null, (0, _react2.jsx)(AppHeaderNavList, null, (0, _react2.jsx)("li", null, (0, _react2.jsx)(AppHeaderNavLink, {
      to: "/",
      activeClassName: "header-link-active",
      isActive: (match, location) => location.pathname.startsWith('/collections/'),
      onClick: this.toggleMobileMenu
    }, t('app.header.content'))), hasWorkflow && (0, _react2.jsx)("li", null, (0, _react2.jsx)(AppHeaderNavLink, {
      to: "/workflow",
      activeClassName: "header-link-active",
      onClick: this.toggleMobileMenu
    }, t('app.header.workflow'))), showMediaButton && (0, _react2.jsx)("li", null, (0, _react2.jsx)(AppHeaderButton, {
      onClick: () => {
        openMediaLibrary();
        this.toggleMobileMenu();
      }
    }, t('app.header.media'))))), (0, _react2.jsx)(AppHeaderActions, null, creatableCollections.size > 0 && (0, _react2.jsx)(_decapCmsUiDefault.Dropdown, {
      renderButton: () => (0, _react2.jsx)(AppHeaderQuickNewButton, null, " ", t('app.header.quickAdd')),
      dropdownTopOverlap: "30px",
      dropdownWidth: "160px",
      dropdownPosition: "left"
    }, creatableCollections.map(collection => (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label_singular') || collection.get('label'),
      onClick: () => this.handleCreatePostClick(collection.get('name'))
    }))), (0, _react2.jsx)(_UI.SettingsDropdown, {
      displayUrl: displayUrl,
      isTestRepo: isTestRepo,
      imageUrl: user.avatar_url,
      onLogoutClick: onLogoutClick
    })))));
  }
}
_defineProperty(Header, "propTypes", {
  user: _propTypes.default.object,
  collections: _reactImmutableProptypes.default.map.isRequired,
  onCreateEntryClick: _propTypes.default.func.isRequired,
  onLogoutClick: _propTypes.default.func.isRequired,
  openMediaLibrary: _propTypes.default.func.isRequired,
  hasWorkflow: _propTypes.default.bool.isRequired,
  displayUrl: _propTypes.default.string,
  isTestRepo: _propTypes.default.bool,
  t: _propTypes.default.func.isRequired,
  checkBackendStatus: _propTypes.default.func.isRequired,
  showMediaButton: _propTypes.default.bool
});
const mapDispatchToProps = {
  checkBackendStatus: _status.checkBackendStatus
};
var _default = exports.default = (0, _reactRedux.connect)(null, mapDispatchToProps)((0, _reactPolyglot.translate)()(Header));