"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _EditorControl = _interopRequireDefault(require("./EditorControl"));
var _i18n = require("../../../lib/i18n");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const ControlPaneContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11hw0lx4",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1lpdjf9",
  styles: "max-width:800px;margin:0 auto;padding-bottom:6rem;font-size:16px"
} : {
  name: "1lpdjf9",
  styles: "max-width:800px;margin:0 auto;padding-bottom:6rem;font-size:16px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleButton = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.StyledDropdownButton, {
  target: "e11hw0lx3",
  label: "LocaleButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.buttons.medium, ";color:", _decapCmsUiDefault.colors.controlLabel, ";background:", _decapCmsUiDefault.colors.textFieldBorder, ";height:100%;&:after{top:11px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const LocaleButtonWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11hw0lx2",
  label: "LocaleButtonWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleRowWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11hw0lx1",
  label: "LocaleRowWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledDropdown = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.Dropdown, {
  target: "e11hw0lx0",
  label: "StyledDropdown"
})(process.env.NODE_ENV === "production" ? {
  name: "1hfmrg2",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;margin-right:20px"
} : {
  name: "1hfmrg2",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;margin-right:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvRHVDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7XG4gIGJ1dHRvbnMsXG4gIGNvbG9ycyxcbiAgRHJvcGRvd24sXG4gIERyb3Bkb3duSXRlbSxcbiAgU3R5bGVkRHJvcGRvd25CdXR0b24sXG4gIHRleHQsXG59IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IEVkaXRvckNvbnRyb2wgZnJvbSAnLi9FZGl0b3JDb250cm9sJztcbmltcG9ydCB7XG4gIGdldEkxOG5JbmZvLFxuICBnZXRMb2NhbGVEYXRhUGF0aCxcbiAgaGFzSTE4bixcbiAgaXNGaWVsZER1cGxpY2F0ZSxcbiAgaXNGaWVsZEhpZGRlbixcbiAgaXNGaWVsZFRyYW5zbGF0YWJsZSxcbn0gZnJvbSAnLi4vLi4vLi4vbGliL2kxOG4nO1xuXG5jb25zdCBDb250cm9sUGFuZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1heC13aWR0aDogODAwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nLWJvdHRvbTogNnJlbTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBcbmA7XG5cbmNvbnN0IExvY2FsZUJ1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgY29sb3I6ICR7Y29sb3JzLmNvbnRyb2xMYWJlbH07XG4gIGJhY2tncm91bmQ6ICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG4gIGhlaWdodDogMTAwJTtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IExvY2FsZUJ1dHRvbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgTG9jYWxlUm93V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5jb25zdCBTdHlsZWREcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gIHdpZHRoOiBtYXgtY29udGVudDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuYDtcblxuZnVuY3Rpb24gTG9jYWxlRHJvcGRvd24oeyBsb2NhbGVzLCBkcm9wZG93blRleHQsIG9uTG9jYWxlQ2hhbmdlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRHJvcGRvd25cbiAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxMb2NhbGVCdXR0b25XcmFwcGVyPlxuICAgICAgICAgICAgPExvY2FsZUJ1dHRvbj57ZHJvcGRvd25UZXh0fTwvTG9jYWxlQnV0dG9uPlxuICAgICAgICAgIDwvTG9jYWxlQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgPlxuICAgICAge2xvY2FsZXMubWFwKGwgPT4gKFxuICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAke3RleHQuZmllbGRMYWJlbH1cbiAgICAgICAgICBgfVxuICAgICAgICAgIGtleT17bH1cbiAgICAgICAgICBsYWJlbD17bH1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkxvY2FsZUNoYW5nZShsKX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvU3R5bGVkRHJvcGRvd24+XG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldEZpZWxkVmFsdWUoeyBmaWVsZCwgZW50cnksIGlzVHJhbnNsYXRhYmxlLCBsb2NhbGUgfSkge1xuICBpZiAoZmllbGQuZ2V0KCdtZXRhJykpIHtcbiAgICByZXR1cm4gZW50cnkuZ2V0SW4oWydtZXRhJywgZmllbGQuZ2V0KCduYW1lJyldKTtcbiAgfVxuXG4gIGlmIChpc1RyYW5zbGF0YWJsZSkge1xuICAgIGNvbnN0IGRhdGFQYXRoID0gZ2V0TG9jYWxlRGF0YVBhdGgobG9jYWxlKTtcbiAgICByZXR1cm4gZW50cnkuZ2V0SW4oWy4uLmRhdGFQYXRoLCBmaWVsZC5nZXQoJ25hbWUnKV0pO1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5LmdldEluKFsnZGF0YScsIGZpZWxkLmdldCgnbmFtZScpXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xQYW5lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc2VsZWN0ZWRMb2NhbGU6IHRoaXMucHJvcHMubG9jYWxlLFxuICB9O1xuXG4gIGNvbXBvbmVudFZhbGlkYXRlID0ge307XG5cbiAgY29udHJvbFJlZihmaWVsZCwgd3JhcHBlZENvbnRyb2wpIHtcbiAgICBpZiAoIXdyYXBwZWRDb250cm9sKSByZXR1cm47XG4gICAgY29uc3QgbmFtZSA9IGZpZWxkLmdldCgnbmFtZScpO1xuXG4gICAgdGhpcy5jb21wb25lbnRWYWxpZGF0ZVtuYW1lXSA9XG4gICAgICB3cmFwcGVkQ29udHJvbC5pbm5lcldyYXBwZWRDb250cm9sPy52YWxpZGF0ZSB8fCB3cmFwcGVkQ29udHJvbC52YWxpZGF0ZTtcbiAgfVxuXG4gIGhhbmRsZUxvY2FsZUNoYW5nZSA9IHZhbCA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkTG9jYWxlOiB2YWwgfSk7XG4gICAgdGhpcy5wcm9wcy5vbkxvY2FsZUNoYW5nZSh2YWwpO1xuICB9O1xuXG4gIGNvcHlGcm9tT3RoZXJMb2NhbGUgPVxuICAgICh7IHRhcmdldExvY2FsZSwgdCB9KSA9PlxuICAgIHNvdXJjZUxvY2FsZSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgICF3aW5kb3cuY29uZmlybShcbiAgICAgICAgICB0KCdlZGl0b3IuZWRpdG9yQ29udHJvbFBhbmUuaTE4bi5jb3B5RnJvbUxvY2FsZUNvbmZpcm0nLCB7XG4gICAgICAgICAgICBsb2NhbGU6IHNvdXJjZUxvY2FsZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBlbnRyeSwgY29sbGVjdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHsgbG9jYWxlcywgZGVmYXVsdExvY2FsZSB9ID0gZ2V0STE4bkluZm8oY29sbGVjdGlvbik7XG5cbiAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRMb2NhbGU7XG4gICAgICBjb25zdCBpMThuID0gbG9jYWxlcyAmJiB7XG4gICAgICAgIGN1cnJlbnRMb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgbG9jYWxlcyxcbiAgICAgICAgZGVmYXVsdExvY2FsZSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucHJvcHMuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICBpZiAoaXNGaWVsZFRyYW5zbGF0YWJsZShmaWVsZCwgdGFyZ2V0TG9jYWxlLCBzb3VyY2VMb2NhbGUpKSB7XG4gICAgICAgICAgY29uc3QgY29weVZhbHVlID0gZ2V0RmllbGRWYWx1ZSh7XG4gICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgbG9jYWxlOiBzb3VyY2VMb2NhbGUsXG4gICAgICAgICAgICBpc1RyYW5zbGF0YWJsZTogc291cmNlTG9jYWxlICE9PSBkZWZhdWx0TG9jYWxlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChjb3B5VmFsdWUpIHRoaXMucHJvcHMub25DaGFuZ2UoZmllbGQsIGNvcHlWYWx1ZSwgdW5kZWZpbmVkLCBpMThuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICB2YWxpZGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgIGlmIChmaWVsZC5nZXQoJ3dpZGdldCcpID09PSAnaGlkZGVuJykgcmV0dXJuO1xuICAgICAgdGhpcy5jb21wb25lbnRWYWxpZGF0ZVtmaWVsZC5nZXQoJ25hbWUnKV0oKTtcbiAgICB9KTtcbiAgfTtcblxuICBzd2l0Y2hUb0RlZmF1bHRMb2NhbGUgPSAoKSA9PiB7XG4gICAgaWYgKGhhc0kxOG4odGhpcy5wcm9wcy5jb2xsZWN0aW9uKSkge1xuICAgICAgY29uc3QgeyBkZWZhdWx0TG9jYWxlIH0gPSBnZXRJMThuSW5mbyh0aGlzLnByb3BzLmNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkTG9jYWxlOiBkZWZhdWx0TG9jYWxlIH0sIHJlc29sdmUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9uLCBlbnRyeSwgZmllbGRzLCBmaWVsZHNNZXRhRGF0YSwgZmllbGRzRXJyb3JzLCBvbkNoYW5nZSwgb25WYWxpZGF0ZSwgdCB9ID1cbiAgICAgIHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24gfHwgIWZpZWxkcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5LnNpemUgPT09IDAgfHwgZW50cnkuZ2V0KCdwYXJ0aWFsJykgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbG9jYWxlcywgZGVmYXVsdExvY2FsZSB9ID0gZ2V0STE4bkluZm8oY29sbGVjdGlvbik7XG4gICAgY29uc3QgbG9jYWxlID0gdGhpcy5zdGF0ZS5zZWxlY3RlZExvY2FsZTtcbiAgICBjb25zdCBpMThuID0gbG9jYWxlcyAmJiB7XG4gICAgICBjdXJyZW50TG9jYWxlOiBsb2NhbGUsXG4gICAgICBsb2NhbGVzLFxuICAgICAgZGVmYXVsdExvY2FsZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb250cm9sUGFuZUNvbnRhaW5lcj5cbiAgICAgICAge2xvY2FsZXMgJiYgKFxuICAgICAgICAgIDxMb2NhbGVSb3dXcmFwcGVyPlxuICAgICAgICAgICAgPExvY2FsZURyb3Bkb3duXG4gICAgICAgICAgICAgIGxvY2FsZXM9e2xvY2FsZXN9XG4gICAgICAgICAgICAgIGRyb3Bkb3duVGV4dD17dCgnZWRpdG9yLmVkaXRvckNvbnRyb2xQYW5lLmkxOG4ud3JpdGluZ0luTG9jYWxlJywge1xuICAgICAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICBvbkxvY2FsZUNoYW5nZT17dGhpcy5oYW5kbGVMb2NhbGVDaGFuZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPExvY2FsZURyb3Bkb3duXG4gICAgICAgICAgICAgIGxvY2FsZXM9e2xvY2FsZXMuZmlsdGVyKGwgPT4gbCAhPT0gbG9jYWxlKX1cbiAgICAgICAgICAgICAgZHJvcGRvd25UZXh0PXt0KCdlZGl0b3IuZWRpdG9yQ29udHJvbFBhbmUuaTE4bi5jb3B5RnJvbUxvY2FsZScpfVxuICAgICAgICAgICAgICBvbkxvY2FsZUNoYW5nZT17dGhpcy5jb3B5RnJvbU90aGVyTG9jYWxlKHsgdGFyZ2V0TG9jYWxlOiBsb2NhbGUsIHQgfSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTG9jYWxlUm93V3JhcHBlcj5cbiAgICAgICAgKX1cbiAgICAgICAge2ZpZWxkc1xuICAgICAgICAgIC5maWx0ZXIoZiA9PiBmLmdldCgnd2lkZ2V0JykgIT09ICdoaWRkZW4nKVxuICAgICAgICAgIC5tYXAoKGZpZWxkLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1RyYW5zbGF0YWJsZSA9IGlzRmllbGRUcmFuc2xhdGFibGUoZmllbGQsIGxvY2FsZSwgZGVmYXVsdExvY2FsZSk7XG4gICAgICAgICAgICBjb25zdCBpc0R1cGxpY2F0ZSA9IGlzRmllbGREdXBsaWNhdGUoZmllbGQsIGxvY2FsZSwgZGVmYXVsdExvY2FsZSk7XG4gICAgICAgICAgICBjb25zdCBpc0hpZGRlbiA9IGlzRmllbGRIaWRkZW4oZmllbGQsIGxvY2FsZSwgZGVmYXVsdExvY2FsZSk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBpMThuID8gYCR7bG9jYWxlfV8ke2l9YCA6IGk7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxFZGl0b3JDb250cm9sXG4gICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtnZXRGaWVsZFZhbHVlKHtcbiAgICAgICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICAgICAgZW50cnksXG4gICAgICAgICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICAgICAgICBpc1RyYW5zbGF0YWJsZSxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICBmaWVsZHNNZXRhRGF0YT17ZmllbGRzTWV0YURhdGF9XG4gICAgICAgICAgICAgICAgZmllbGRzRXJyb3JzPXtmaWVsZHNFcnJvcnN9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhmaWVsZCwgbmV3VmFsdWUsIG5ld01ldGFkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZShmaWVsZCwgbmV3VmFsdWUsIG5ld01ldGFkYXRhLCBpMThuKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uVmFsaWRhdGU9e29uVmFsaWRhdGV9XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbnRyb2xSZWY9e3RoaXMuY29udHJvbFJlZi5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgIGNvbnRyb2xSZWY9e3RoaXMuY29udHJvbFJlZn1cbiAgICAgICAgICAgICAgICBlbnRyeT17ZW50cnl9XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtpc0R1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICBpc0hpZGRlbj17aXNIaWRkZW59XG4gICAgICAgICAgICAgICAgaXNGaWVsZER1cGxpY2F0ZT17ZmllbGQgPT4gaXNGaWVsZER1cGxpY2F0ZShmaWVsZCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKX1cbiAgICAgICAgICAgICAgICBpc0ZpZWxkSGlkZGVuPXtmaWVsZCA9PiBpc0ZpZWxkSGlkZGVuKGZpZWxkLCBsb2NhbGUsIGRlZmF1bHRMb2NhbGUpfVxuICAgICAgICAgICAgICAgIGxvY2FsZT17bG9jYWxlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgIDwvQ29udHJvbFBhbmVDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5Db250cm9sUGFuZS5wcm9wVHlwZXMgPSB7XG4gIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZW50cnk6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdC5pc1JlcXVpcmVkLFxuICBmaWVsZHNNZXRhRGF0YTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBmaWVsZHNFcnJvcnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uVmFsaWRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function LocaleDropdown({
  locales,
  dropdownText,
  onLocaleChange
}) {
  return (0, _react2.jsx)(StyledDropdown, {
    renderButton: () => {
      return (0, _react2.jsx)(LocaleButtonWrapper, null, (0, _react2.jsx)(LocaleButton, null, dropdownText));
    }
  }, locales.map(l => (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.text.fieldLabel, ";;label:LocaleDropdown;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
    key: l,
    label: l,
    onClick: () => onLocaleChange(l)
  })));
}
function getFieldValue({
  field,
  entry,
  isTranslatable,
  locale
}) {
  if (field.get('meta')) {
    return entry.getIn(['meta', field.get('name')]);
  }
  if (isTranslatable) {
    const dataPath = (0, _i18n.getLocaleDataPath)(locale);
    return entry.getIn([...dataPath, field.get('name')]);
  }
  return entry.getIn(['data', field.get('name')]);
}
class ControlPane extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      selectedLocale: this.props.locale
    });
    _defineProperty(this, "componentValidate", {});
    _defineProperty(this, "handleLocaleChange", val => {
      this.setState({
        selectedLocale: val
      });
      this.props.onLocaleChange(val);
    });
    _defineProperty(this, "copyFromOtherLocale", ({
      targetLocale,
      t
    }) => sourceLocale => {
      if (!window.confirm(t('editor.editorControlPane.i18n.copyFromLocaleConfirm', {
        locale: sourceLocale.toUpperCase()
      }))) {
        return;
      }
      const {
        entry,
        collection
      } = this.props;
      const {
        locales,
        defaultLocale
      } = (0, _i18n.getI18nInfo)(collection);
      const locale = this.state.selectedLocale;
      const i18n = locales && {
        currentLocale: locale,
        locales,
        defaultLocale
      };
      this.props.fields.forEach(field => {
        if ((0, _i18n.isFieldTranslatable)(field, targetLocale, sourceLocale)) {
          const copyValue = getFieldValue({
            field,
            entry,
            locale: sourceLocale,
            isTranslatable: sourceLocale !== defaultLocale
          });
          if (copyValue) this.props.onChange(field, copyValue, undefined, i18n);
        }
      });
    });
    _defineProperty(this, "validate", async () => {
      this.props.fields.forEach(field => {
        if (field.get('widget') === 'hidden') return;
        this.componentValidate[field.get('name')]();
      });
    });
    _defineProperty(this, "switchToDefaultLocale", () => {
      if ((0, _i18n.hasI18n)(this.props.collection)) {
        const {
          defaultLocale
        } = (0, _i18n.getI18nInfo)(this.props.collection);
        return new Promise(resolve => this.setState({
          selectedLocale: defaultLocale
        }, resolve));
      } else {
        return Promise.resolve();
      }
    });
  }
  controlRef(field, wrappedControl) {
    var _wrappedControl$inner;
    if (!wrappedControl) return;
    const name = field.get('name');
    this.componentValidate[name] = ((_wrappedControl$inner = wrappedControl.innerWrappedControl) === null || _wrappedControl$inner === void 0 ? void 0 : _wrappedControl$inner.validate) || wrappedControl.validate;
  }
  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate,
      t
    } = this.props;
    if (!collection || !fields) {
      return null;
    }
    if (entry.size === 0 || entry.get('partial') === true) {
      return null;
    }
    const {
      locales,
      defaultLocale
    } = (0, _i18n.getI18nInfo)(collection);
    const locale = this.state.selectedLocale;
    const i18n = locales && {
      currentLocale: locale,
      locales,
      defaultLocale
    };
    return (0, _react2.jsx)(ControlPaneContainer, null, locales && (0, _react2.jsx)(LocaleRowWrapper, null, (0, _react2.jsx)(LocaleDropdown, {
      locales: locales,
      dropdownText: t('editor.editorControlPane.i18n.writingInLocale', {
        locale: locale.toUpperCase()
      }),
      onLocaleChange: this.handleLocaleChange
    }), (0, _react2.jsx)(LocaleDropdown, {
      locales: locales.filter(l => l !== locale),
      dropdownText: t('editor.editorControlPane.i18n.copyFromLocale'),
      onLocaleChange: this.copyFromOtherLocale({
        targetLocale: locale,
        t
      })
    })), fields.filter(f => f.get('widget') !== 'hidden').map((field, i) => {
      const isTranslatable = (0, _i18n.isFieldTranslatable)(field, locale, defaultLocale);
      const isDuplicate = (0, _i18n.isFieldDuplicate)(field, locale, defaultLocale);
      const isHidden = (0, _i18n.isFieldHidden)(field, locale, defaultLocale);
      const key = i18n ? `${locale}_${i}` : i;
      return (0, _react2.jsx)(_EditorControl.default, {
        key: key,
        field: field,
        value: getFieldValue({
          field,
          entry,
          locale,
          isTranslatable
        }),
        fieldsMetaData: fieldsMetaData,
        fieldsErrors: fieldsErrors,
        onChange: (field, newValue, newMetadata) => {
          onChange(field, newValue, newMetadata, i18n);
        },
        onValidate: onValidate,
        processControlRef: this.controlRef.bind(this),
        controlRef: this.controlRef,
        entry: entry,
        collection: collection,
        isDisabled: isDuplicate,
        isHidden: isHidden,
        isFieldDuplicate: field => (0, _i18n.isFieldDuplicate)(field, locale, defaultLocale),
        isFieldHidden: field => (0, _i18n.isFieldHidden)(field, locale, defaultLocale),
        locale: locale
      });
    }));
  }
}
exports.default = ControlPane;
ControlPane.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  locale: _propTypes.default.string
};