"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EditorToolbar = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _reactPolyglot = require("react-polyglot");
var _reactRouterDom = require("react-router-dom");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _publishModes = require("../../constants/publishModes");
var _UI = require("../UI");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const styles = {
  noOverflow: process.env.NODE_ENV === "production" ? {
    name: "1ctb18k-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;label:noOverflow;"
  } : {
    name: "1ctb18k-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;label:noOverflow;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "bx8mhy-buttonMargin",
    styles: "margin:0 10px;label:buttonMargin;"
  } : {
    name: "bx8mhy-buttonMargin",
    styles: "margin:0 10px;label:buttonMargin;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  toolbarSection: /*#__PURE__*/(0, _react2.css)("height:100%;display:flex;align-items:center;border:0 solid ", _decapCmsUiDefault.colors.textFieldBorder, ";;label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  publishedButton: /*#__PURE__*/(0, _react2.css)("background-color:", _decapCmsUiDefault.colorsRaw.tealLight, ";color:", _decapCmsUiDefault.colorsRaw.tealDark, ";;label:publishedButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDc0IiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IFNldHRpbmdzRHJvcGRvd24gfSBmcm9tICcuLi9VSSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbm9PdmVyZmxvdzogY3NzYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgYCxcbiAgYnV0dG9uTWFyZ2luOiBjc3NgXG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIGAsXG4gIHRvb2xiYXJTZWN0aW9uOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDAgc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYCxcbiAgcHVibGlzaGVkQnV0dG9uOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbERhcmt9O1xuICBgLFxuICBsb2dvdXRCdXR0b246IGNzc2BcbiAgY29sb3I6IHJlZDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGAsXG59O1xuXG5jb25zdCBUb29sdGlwVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6IDMyMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNXB4O1xuXG4gIC8qIFBvc2l0aW9uIHRoZSB0b29sdGlwIHRleHQgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICB0b3A6IDE0NSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IC0zMjBweDtcblxuICAvKiBGYWRlIGluIHRvb2x0aXAgKi9cbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuYDtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAmOmhvdmVyICsgJHtUb29sdGlwVGV4dH0ge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG5gO1xuXG5jb25zdCBUb29sdGlwQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgRHJvcGRvd25CdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5ub092ZXJmbG93fVxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpLFxuICAgIDAgMnB4IDU0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gXG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDMwMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgICBnYXA6IDFyZW07XG4gIH1cblxuXG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1haW4gPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHBhZGRpbmc6IDAgMTBweDtcblxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAxcmVtIDA7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIHBhZGRpbmc6IDFyZW07XG4gIH1cbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWV0YSA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLWxlZnQtd2lkdGg6IDFweDtcbiAgcGFkZGluZzogMCA3cHg7XG5gO1xuXG5jb25zdCBUb29sYmFyRHJvcGRvd24gPSBzdHlsZWQoRHJvcGRvd24pYFxuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgfVxuYDtcblxuY29uc3QgQmFja0Fycm93ID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAyMXB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG5gO1xuXG5jb25zdCBCYWNrQ29sbGVjdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMTRweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXMgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiA2cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzVW5jaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlU3VjY2Vzc307XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzQ2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZURhbmdlcn07XG5gO1xuXG5jb25zdCBUb29sYmFyQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcbiAgJHtzdHlsZXMubm9PdmVyZmxvd307XG4gIGRpc3BsYXk6IGJsb2NrO1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICBwYWRkaW5nOiAwIDEwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IERlbGV0ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0UmVkfTtcbmA7XG5cbmNvbnN0IFNhdmVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodEJsdWV9O1xuICAmW2Rpc2FibGVkXSB7XG4gICAgJHtidXR0b25zLmRpc2FibGVkfTtcbiAgfVxuYDtcblxuY29uc3QgUHVibGlzaGVkVG9vbGJhckJ1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZEJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaEJ1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuYDtcblxuY29uc3QgU3RhdHVzQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuYDtcblxuY29uc3QgUHJldmlld0J1dHRvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1yaWdodDogMTJweDtcbiAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIGEsXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgfVxuXG4gICR7SWNvbn0ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6IDFweDtcbiAgfVxuYDtcblxuY29uc3QgUmVmcmVzaFByZXZpZXdCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuXG4gIHNwYW4ge1xuICAgIG1hcmdpbi1yaWdodDogNnB4O1xuICB9XG5gO1xuXG5jb25zdCBQcmV2aWV3TGluayA9IFJlZnJlc2hQcmV2aWV3QnV0dG9uLndpdGhDb21wb25lbnQoJ2EnKTtcblxuY29uc3QgUHVibGlzaERyb3BEb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICBtaW4td2lkdGg6IGluaXRpYWw7XG5gO1xuXG5jb25zdCBTdGF0dXNEcm9wZG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgfVxuYDtcblxuZXhwb3J0IGNsYXNzIEVkaXRvclRvb2xiYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGlzUGVyc2lzdGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNQdWJsaXNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1VwZGF0aW5nU3RhdHVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0RlbGV0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvblBlcnNpc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kTmV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZER1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzaG93RGVsZXRlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1blB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kTmV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZER1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGVwbG95UHJldmlldzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGVkaXRvckJhY2tMaW5rOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBpc05ld0VudHJ5LCBsb2FkRGVwbG95UHJldmlldyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWlzTmV3RW50cnkpIHtcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3KHsgbWF4QXR0ZW1wdHM6IDMgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgaXNQZXJzaXN0aW5nLCBsb2FkRGVwbG95UHJldmlldyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgcHJldlByb3BzLmlzUGVyc2lzdGluZyAmJiAhaXNQZXJzaXN0aW5nKSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclNpbXBsZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgaGFzQ2hhbmdlZCwgaXNOZXdFbnRyeSwgc2hvd0RlbGV0ZSwgb25EZWxldGUsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIHshaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZFxuICAgICAgICAgID8gdGhpcy5yZW5kZXJFeGlzdGluZ0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzKHsgY2FuQ3JlYXRlIH0pXG4gICAgICAgICAgOiB0aGlzLnJlbmRlck5ld0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzKHsgY2FuQ3JlYXRlIH0pfVxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHtzaG93RGVsZXRlID8gKFxuICAgICAgICAgICAgPERlbGV0ZUJ1dHRvbiBvbkNsaWNrPXtvbkRlbGV0ZX0+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZUVudHJ5Jyl9PC9EZWxldGVCdXR0b24+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSBsYWJlbCA9PiB7XG4gICAgY29uc3QgeyBkZXBsb3lQcmV2aWV3ID0ge30sIGxvYWREZXBsb3lQcmV2aWV3LCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdXJsLCBzdGF0dXMsIGlzRmV0Y2hpbmcgfSA9IGRlcGxveVByZXZpZXc7XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlcGxveVByZXZpZXdSZWFkeSA9IHN0YXR1cyA9PT0gJ1NVQ0NFU1MnICYmICFpc0ZldGNoaW5nO1xuICAgIHJldHVybiAoXG4gICAgICA8UHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAge2RlcGxveVByZXZpZXdSZWFkeSA/IChcbiAgICAgICAgICA8UHJldmlld0xpbmsgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICA8c3Bhbj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cIm5ldy10YWJcIiBzaXplPVwieHNtYWxsXCIgLz5cbiAgICAgICAgICA8L1ByZXZpZXdMaW5rPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxSZWZyZXNoUHJldmlld0J1dHRvbiBvbkNsaWNrPXtsb2FkRGVwbG95UHJldmlld30+XG4gICAgICAgICAgICA8c3Bhbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld1BlbmRpbmdCdXR0b25MYWJlbCcpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJyZWZyZXNoXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9SZWZyZXNoUHJldmlld0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclN0YXR1c0luZm9Ub29sdGlwID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgdCwgY3VycmVudFN0YXR1cyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvTG9jYWxlS2V5ID0ge1xuICAgICAgW3N0YXR1cy5nZXQoJ0RSQUZUJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBEcmFmdCcsXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06ICdzdGF0dXNJbmZvVG9vbHRpcEluUmV2aWV3JyxcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RhdHVzS2V5ID0gT2JqZWN0LmtleXMoc3RhdHVzVG9Mb2NhbGVLZXkpLmZpbmQoa2V5ID0+IGtleSA9PT0gY3VycmVudFN0YXR1cyk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sdGlwQ29udGFpbmVyPlxuICAgICAgICA8VG9vbHRpcD5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwiaW5mby1jaXJjbGVcIiBzaXplPVwic21hbGxcIiBjbGFzc05hbWU9XCJ0b29sdGlwXCIgLz5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICB7c3RhdHVzS2V5ICYmIChcbiAgICAgICAgICA8VG9vbHRpcFRleHQ+e3QoYGVkaXRvci5lZGl0b3JUb29sYmFyLiR7c3RhdHVzVG9Mb2NhbGVLZXlbc3RhdHVzS2V5XX1gKX08L1Rvb2x0aXBUZXh0PlxuICAgICAgICApfVxuICAgICAgPC9Ub29sdGlwQ29udGFpbmVyPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dTdGF0dXNDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGlzVXBkYXRpbmdTdGF0dXMsIG9uQ2hhbmdlU3RhdHVzLCBjdXJyZW50U3RhdHVzLCB0LCB1c2VPcGVuQXV0aG9yaW5nIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgc3RhdHVzVG9UcmFuc2xhdGlvbiA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKSxcbiAgICAgIFtzdGF0dXMuZ2V0KCdQRU5ESU5HX1JFVklFVycpXTogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKSxcbiAgICAgIFtzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnJlYWR5JyksXG4gICAgfTtcblxuICAgIGNvbnN0IGJ1dHRvblRleHQgPSBpc1VwZGF0aW5nU3RhdHVzXG4gICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVwZGF0aW5nJylcbiAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc3RhdHVzJywgeyBzdGF0dXM6IHN0YXR1c1RvVHJhbnNsYXRpb25bY3VycmVudFN0YXR1c10gfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxMjBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiA8U3RhdHVzQnV0dG9uPntidXR0b25UZXh0fTwvU3RhdHVzQnV0dG9uPn1cbiAgICAgICAgPlxuICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kcmFmdCcpfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ0RSQUZUJyl9XG4gICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdEUkFGVCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdQRU5ESU5HX1JFVklFVycpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAnJ1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19QVUJMSVNIJyl9XG4gICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUFVCTElTSCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICAgICB7dXNlT3BlbkF1dGhvcmluZyAmJiB0aGlzLnJlbmRlclN0YXR1c0luZm9Ub29sdGlwKCl9XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlck5ld0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2ggfSkgPT4ge1xuICAgIGNvbnN0IHsgaXNQdWJsaXNoaW5nLCBvblB1Ymxpc2gsIG9uUHVibGlzaEFuZE5ldywgb25QdWJsaXNoQW5kRHVwbGljYXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGNhblB1Ymxpc2ggPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMjAwcHhcIlxuICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgIHtpc1B1Ymxpc2hpbmdcbiAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8UHVibGlzaERyb3BEb3duSXRlbVxuICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaH1cbiAgICAgICAgLz5cbiAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZE5ld31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UHVibGlzaERyb3BEb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kRHVwbGljYXRlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICApIDogKFxuICAgICAgJydcbiAgICApO1xuICB9O1xuXG4gIHJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCwgY2FuRGVsZXRlIH0pID0+IHtcbiAgICBjb25zdCB7IHVuUHVibGlzaCwgb25EdXBsaWNhdGUsIGlzUGVyc2lzdGluZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoIHx8IGNhbkNyZWF0ZSA/IChcbiAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgIGtleT1cInRkLXB1Ymxpc2gtY3JlYXRlXCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICB7aXNQZXJzaXN0aW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX1cbiAgICAgICAgICA8L1B1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIHtjYW5EZWxldGUgJiYgY2FuUHVibGlzaCAmJiAoXG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaCcpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXt1blB1Ymxpc2h9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge2NhbkNyZWF0ZSAmJiAoXG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlIH0pID0+IHtcbiAgICBjb25zdCB7IG9uRHVwbGljYXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICA8UHVibGlzaGVkVG9vbGJhckJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7XG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICApIDogKFxuICAgICAgPFB1Ymxpc2hlZEJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRCdXR0b24+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvblBlcnNpc3QsIG9uUGVyc2lzdEFuZE5ldywgb25QZXJzaXN0QW5kRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICA8L1B1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmROZXd9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyU2ltcGxlRGVwbG95UHJldmlld0NvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgaGFzQ2hhbmdlZCwgaXNOZXdFbnRyeSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveUJ1dHRvbkxhYmVsJykpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd0NvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBzaG93RGVsZXRlLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICBpc0RlbGV0aW5nLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIGlzTW9kaWZpY2F0aW9uLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGNvbnN0IGNhblB1Ymxpc2ggPSBjb2xsZWN0aW9uLmdldCgncHVibGlzaCcpICYmICF1c2VPcGVuQXV0aG9yaW5nO1xuICAgIGNvbnN0IGNhbkRlbGV0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdkZWxldGUnLCB0cnVlKTtcblxuICAgIGNvbnN0IGRlbGV0ZUxhYmVsID1cbiAgICAgIChoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiZcbiAgICAgICAgaXNNb2RpZmljYXRpb24gJiZcbiAgICAgICAgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzJykpIHx8XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIChpc05ld0VudHJ5IHx8ICFpc01vZGlmaWNhdGlvbikgJiZcbiAgICAgICAgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlVW5wdWJsaXNoZWRFbnRyeScpKSB8fFxuICAgICAgKCFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uICYmIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVB1Ymxpc2hlZEVudHJ5JykpO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIDxTYXZlQnV0dG9uXG4gICAgICAgIGRpc2FibGVkPXshaGFzQ2hhbmdlZH1cbiAgICAgICAga2V5PVwic2F2ZS1idXR0b25cIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYXNDaGFuZ2VkICYmIG9uUGVyc2lzdCgpfVxuICAgICAgPlxuICAgICAgICB7aXNQZXJzaXN0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2aW5nJykgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zYXZlJyl9XG4gICAgICA8L1NhdmVCdXR0b24+LFxuICAgICAgY3VycmVudFN0YXR1c1xuICAgICAgICA/IFtcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9XCJ3b3JrZmxvdy1zdGF0dXMtY29udHJvbHNcIj5cbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyV29ya2Zsb3dTdGF0dXNDb250cm9scygpfVxuICAgICAgICAgICAgICB7IWhhc0NoYW5nZWQgJiYgdGhpcy5yZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pfVxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4sXG4gICAgICAgICAgXVxuICAgICAgICA6ICFpc05ld0VudHJ5ICYmIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9XCJleGlzdGluZy1lbnRyeS13b3JrZmxvdy1wdWJsaXNoLWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7XG4gICAgICAgICAgICAgICAgY2FuQ3JlYXRlLFxuICAgICAgICAgICAgICAgIGNhblB1Ymxpc2gsXG4gICAgICAgICAgICAgICAgY2FuRGVsZXRlLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgKSxcbiAgICAgICghc2hvd0RlbGV0ZSB8fCB1c2VPcGVuQXV0aG9yaW5nKSAmJiAhaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiA/IG51bGwgOiAoXG4gICAgICAgIDxEZWxldGVCdXR0b25cbiAgICAgICAgICBrZXk9XCJkZWxldGUtYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYXNVbnB1Ymxpc2hlZENoYW5nZXMgPyBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyA6IG9uRGVsZXRlfVxuICAgICAgICA+XG4gICAgICAgICAge2lzRGVsZXRpbmcgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGluZycpIDogZGVsZXRlTGFiZWx9XG4gICAgICAgIDwvRGVsZXRlQnV0dG9uPlxuICAgICAgKSxcbiAgICBdO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93RGVwbG95UHJldmlld0NvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudFN0YXR1cywgaXNOZXdFbnRyeSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld0J1dHRvbkxhYmVsJykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggY29udHJvbCBmb3IgcHVibGlzaGVkIHdvcmtmbG93IGVudHJ5LlxuICAgICAqL1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveUJ1dHRvbkxhYmVsJykpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBkaXNwbGF5VXJsLFxuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGhhc1dvcmtmbG93LFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIHQsXG4gICAgICBlZGl0b3JCYWNrTGluayxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgdG89e2VkaXRvckJhY2tMaW5rfT5cbiAgICAgICAgICA8QmFja0Fycm93PuKGkDwvQmFja0Fycm93PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8QmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5iYWNrQ29sbGVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTGFiZWw6IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICB7aGFzQ2hhbmdlZCA/IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNDaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnNhdmVkQ2hhbmdlcycpfTwvQmFja1N0YXR1c0NoYW5nZWQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c1VuY2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuY2hhbmdlc1NhdmVkJyl9PC9CYWNrU3RhdHVzVW5jaGFuZ2VkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbkJhY2tMaW5rPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gdGhpcy5yZW5kZXJXb3JrZmxvd0NvbnRyb2xzKCkgOiB0aGlzLnJlbmRlclNpbXBsZUNvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3dcbiAgICAgICAgICAgICAgPyB0aGlzLnJlbmRlcldvcmtmbG93RGVwbG95UHJldmlld0NvbnRyb2xzKClcbiAgICAgICAgICAgICAgOiB0aGlzLnJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uTWFpbj5cbiAgICAgIDwvVG9vbGJhckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEVkaXRvclRvb2xiYXIpO1xuIl19 */")),
  logoutButton: process.env.NODE_ENV === "production" ? {
    name: "paisbk-logoutButton",
    styles: "color:red;font-weight:bold;label:logoutButton;"
  } : {
    name: "paisbk-logoutButton",
    styles: "color:red;font-weight:bold;label:logoutButton;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const TooltipText = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo26",
  label: "TooltipText"
})(process.env.NODE_ENV === "production" ? {
  name: "1ykbu60",
  styles: "visibility:hidden;width:321px;background-color:#555;color:#fff;text-align:unset;border-radius:6px;padding:5px;position:absolute;z-index:1;top:145%;left:50%;margin-left:-320px;opacity:0;transition:opacity 0.3s"
} : {
  name: "1ykbu60",
  styles: "visibility:hidden;width:321px;background-color:#555;color:#fff;text-align:unset;border-radius:6px;padding:5px;position:absolute;z-index:1;top:145%;left:50%;margin-left:-320px;opacity:0;transition:opacity 0.3s",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Tooltip = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo25",
  label: "Tooltip"
})("position:relative;display:inline-block;&:hover+", TooltipText, "{visibility:visible;opacity:0.9;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TooltipContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo24",
  label: "TooltipContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "bjn8wh",
  styles: "position:relative"
} : {
  name: "bjn8wh",
  styles: "position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const DropdownButton = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.StyledDropdownButton, {
  target: "e1d2l9mo23",
  label: "DropdownButton"
})(styles.noOverflow, "@media (max-width: 1200px){padding-left:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo22",
  label: "ToolbarContainer"
})("box-shadow:0 2px 6px 0 rgba(68, 74, 87, 0.05),0 1px 3px 0 rgba(68, 74, 87, 0.1),0 2px 54px rgba(0, 0, 0, 0.1);position:absolute;top:0;left:0;width:100%;z-index:", _decapCmsUiDefault.zIndex.zIndex300, ";background-color:#fff;height:66px;display:flex;justify-content:space-between;@media (max-width: 768px){flex-direction:column;height:fit-content;gap:1rem;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMain = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo21",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";display:flex;justify-content:space-between;padding:0 10px;@media (max-width: 768px){justify-content:center;padding:1rem 0;flex-direction:column;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSubSectionFirst = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo20",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "s5xdrg",
  styles: "display:flex;align-items:center"
} : {
  name: "s5xdrg",
  styles: "display:flex;align-items:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSubSectionLast = /*#__PURE__*/(0, _base.default)(ToolbarSubSectionFirst, {
  target: "e1d2l9mo19",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "tqla2r",
  styles: "justify-content:flex-end;@media (max-width: 768px){margin-top:2rem;}"
} : {
  name: "tqla2r",
  styles: "justify-content:flex-end;@media (max-width: 768px){margin-top:2rem;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtJNEQiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IFNldHRpbmdzRHJvcGRvd24gfSBmcm9tICcuLi9VSSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbm9PdmVyZmxvdzogY3NzYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgYCxcbiAgYnV0dG9uTWFyZ2luOiBjc3NgXG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIGAsXG4gIHRvb2xiYXJTZWN0aW9uOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDAgc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYCxcbiAgcHVibGlzaGVkQnV0dG9uOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbERhcmt9O1xuICBgLFxuICBsb2dvdXRCdXR0b246IGNzc2BcbiAgY29sb3I6IHJlZDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGAsXG59O1xuXG5jb25zdCBUb29sdGlwVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6IDMyMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNXB4O1xuXG4gIC8qIFBvc2l0aW9uIHRoZSB0b29sdGlwIHRleHQgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICB0b3A6IDE0NSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IC0zMjBweDtcblxuICAvKiBGYWRlIGluIHRvb2x0aXAgKi9cbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuYDtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAmOmhvdmVyICsgJHtUb29sdGlwVGV4dH0ge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG5gO1xuXG5jb25zdCBUb29sdGlwQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgRHJvcGRvd25CdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5ub092ZXJmbG93fVxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpLFxuICAgIDAgMnB4IDU0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gXG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDMwMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgICBnYXA6IDFyZW07XG4gIH1cblxuXG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1haW4gPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHBhZGRpbmc6IDAgMTBweDtcblxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAxcmVtIDA7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIHBhZGRpbmc6IDFyZW07XG4gIH1cbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWV0YSA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLWxlZnQtd2lkdGg6IDFweDtcbiAgcGFkZGluZzogMCA3cHg7XG5gO1xuXG5jb25zdCBUb29sYmFyRHJvcGRvd24gPSBzdHlsZWQoRHJvcGRvd24pYFxuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgfVxuYDtcblxuY29uc3QgQmFja0Fycm93ID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAyMXB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG5gO1xuXG5jb25zdCBCYWNrQ29sbGVjdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMTRweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXMgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiA2cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzVW5jaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlU3VjY2Vzc307XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzQ2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZURhbmdlcn07XG5gO1xuXG5jb25zdCBUb29sYmFyQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcbiAgJHtzdHlsZXMubm9PdmVyZmxvd307XG4gIGRpc3BsYXk6IGJsb2NrO1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICBwYWRkaW5nOiAwIDEwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IERlbGV0ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0UmVkfTtcbmA7XG5cbmNvbnN0IFNhdmVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodEJsdWV9O1xuICAmW2Rpc2FibGVkXSB7XG4gICAgJHtidXR0b25zLmRpc2FibGVkfTtcbiAgfVxuYDtcblxuY29uc3QgUHVibGlzaGVkVG9vbGJhckJ1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZEJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaEJ1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuYDtcblxuY29uc3QgU3RhdHVzQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuYDtcblxuY29uc3QgUHJldmlld0J1dHRvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1yaWdodDogMTJweDtcbiAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIGEsXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgfVxuXG4gICR7SWNvbn0ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6IDFweDtcbiAgfVxuYDtcblxuY29uc3QgUmVmcmVzaFByZXZpZXdCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuXG4gIHNwYW4ge1xuICAgIG1hcmdpbi1yaWdodDogNnB4O1xuICB9XG5gO1xuXG5jb25zdCBQcmV2aWV3TGluayA9IFJlZnJlc2hQcmV2aWV3QnV0dG9uLndpdGhDb21wb25lbnQoJ2EnKTtcblxuY29uc3QgUHVibGlzaERyb3BEb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICBtaW4td2lkdGg6IGluaXRpYWw7XG5gO1xuXG5jb25zdCBTdGF0dXNEcm9wZG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgfVxuYDtcblxuZXhwb3J0IGNsYXNzIEVkaXRvclRvb2xiYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGlzUGVyc2lzdGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNQdWJsaXNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1VwZGF0aW5nU3RhdHVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0RlbGV0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvblBlcnNpc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kTmV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZER1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzaG93RGVsZXRlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1blB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kTmV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZER1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGVwbG95UHJldmlldzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGVkaXRvckJhY2tMaW5rOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBpc05ld0VudHJ5LCBsb2FkRGVwbG95UHJldmlldyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWlzTmV3RW50cnkpIHtcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3KHsgbWF4QXR0ZW1wdHM6IDMgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgaXNQZXJzaXN0aW5nLCBsb2FkRGVwbG95UHJldmlldyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgcHJldlByb3BzLmlzUGVyc2lzdGluZyAmJiAhaXNQZXJzaXN0aW5nKSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclNpbXBsZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgaGFzQ2hhbmdlZCwgaXNOZXdFbnRyeSwgc2hvd0RlbGV0ZSwgb25EZWxldGUsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIHshaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZFxuICAgICAgICAgID8gdGhpcy5yZW5kZXJFeGlzdGluZ0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzKHsgY2FuQ3JlYXRlIH0pXG4gICAgICAgICAgOiB0aGlzLnJlbmRlck5ld0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzKHsgY2FuQ3JlYXRlIH0pfVxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHtzaG93RGVsZXRlID8gKFxuICAgICAgICAgICAgPERlbGV0ZUJ1dHRvbiBvbkNsaWNrPXtvbkRlbGV0ZX0+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZUVudHJ5Jyl9PC9EZWxldGVCdXR0b24+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSBsYWJlbCA9PiB7XG4gICAgY29uc3QgeyBkZXBsb3lQcmV2aWV3ID0ge30sIGxvYWREZXBsb3lQcmV2aWV3LCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdXJsLCBzdGF0dXMsIGlzRmV0Y2hpbmcgfSA9IGRlcGxveVByZXZpZXc7XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlcGxveVByZXZpZXdSZWFkeSA9IHN0YXR1cyA9PT0gJ1NVQ0NFU1MnICYmICFpc0ZldGNoaW5nO1xuICAgIHJldHVybiAoXG4gICAgICA8UHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAge2RlcGxveVByZXZpZXdSZWFkeSA/IChcbiAgICAgICAgICA8UHJldmlld0xpbmsgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICA8c3Bhbj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cIm5ldy10YWJcIiBzaXplPVwieHNtYWxsXCIgLz5cbiAgICAgICAgICA8L1ByZXZpZXdMaW5rPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxSZWZyZXNoUHJldmlld0J1dHRvbiBvbkNsaWNrPXtsb2FkRGVwbG95UHJldmlld30+XG4gICAgICAgICAgICA8c3Bhbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld1BlbmRpbmdCdXR0b25MYWJlbCcpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJyZWZyZXNoXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9SZWZyZXNoUHJldmlld0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclN0YXR1c0luZm9Ub29sdGlwID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgdCwgY3VycmVudFN0YXR1cyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvTG9jYWxlS2V5ID0ge1xuICAgICAgW3N0YXR1cy5nZXQoJ0RSQUZUJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBEcmFmdCcsXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06ICdzdGF0dXNJbmZvVG9vbHRpcEluUmV2aWV3JyxcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RhdHVzS2V5ID0gT2JqZWN0LmtleXMoc3RhdHVzVG9Mb2NhbGVLZXkpLmZpbmQoa2V5ID0+IGtleSA9PT0gY3VycmVudFN0YXR1cyk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sdGlwQ29udGFpbmVyPlxuICAgICAgICA8VG9vbHRpcD5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwiaW5mby1jaXJjbGVcIiBzaXplPVwic21hbGxcIiBjbGFzc05hbWU9XCJ0b29sdGlwXCIgLz5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICB7c3RhdHVzS2V5ICYmIChcbiAgICAgICAgICA8VG9vbHRpcFRleHQ+e3QoYGVkaXRvci5lZGl0b3JUb29sYmFyLiR7c3RhdHVzVG9Mb2NhbGVLZXlbc3RhdHVzS2V5XX1gKX08L1Rvb2x0aXBUZXh0PlxuICAgICAgICApfVxuICAgICAgPC9Ub29sdGlwQ29udGFpbmVyPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dTdGF0dXNDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGlzVXBkYXRpbmdTdGF0dXMsIG9uQ2hhbmdlU3RhdHVzLCBjdXJyZW50U3RhdHVzLCB0LCB1c2VPcGVuQXV0aG9yaW5nIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgc3RhdHVzVG9UcmFuc2xhdGlvbiA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKSxcbiAgICAgIFtzdGF0dXMuZ2V0KCdQRU5ESU5HX1JFVklFVycpXTogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKSxcbiAgICAgIFtzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnJlYWR5JyksXG4gICAgfTtcblxuICAgIGNvbnN0IGJ1dHRvblRleHQgPSBpc1VwZGF0aW5nU3RhdHVzXG4gICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVwZGF0aW5nJylcbiAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc3RhdHVzJywgeyBzdGF0dXM6IHN0YXR1c1RvVHJhbnNsYXRpb25bY3VycmVudFN0YXR1c10gfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxMjBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiA8U3RhdHVzQnV0dG9uPntidXR0b25UZXh0fTwvU3RhdHVzQnV0dG9uPn1cbiAgICAgICAgPlxuICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kcmFmdCcpfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ0RSQUZUJyl9XG4gICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdEUkFGVCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdQRU5ESU5HX1JFVklFVycpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAnJ1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19QVUJMSVNIJyl9XG4gICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUFVCTElTSCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICAgICB7dXNlT3BlbkF1dGhvcmluZyAmJiB0aGlzLnJlbmRlclN0YXR1c0luZm9Ub29sdGlwKCl9XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlck5ld0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2ggfSkgPT4ge1xuICAgIGNvbnN0IHsgaXNQdWJsaXNoaW5nLCBvblB1Ymxpc2gsIG9uUHVibGlzaEFuZE5ldywgb25QdWJsaXNoQW5kRHVwbGljYXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGNhblB1Ymxpc2ggPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMjAwcHhcIlxuICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgIHtpc1B1Ymxpc2hpbmdcbiAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8UHVibGlzaERyb3BEb3duSXRlbVxuICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaH1cbiAgICAgICAgLz5cbiAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZE5ld31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UHVibGlzaERyb3BEb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kRHVwbGljYXRlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICApIDogKFxuICAgICAgJydcbiAgICApO1xuICB9O1xuXG4gIHJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCwgY2FuRGVsZXRlIH0pID0+IHtcbiAgICBjb25zdCB7IHVuUHVibGlzaCwgb25EdXBsaWNhdGUsIGlzUGVyc2lzdGluZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoIHx8IGNhbkNyZWF0ZSA/IChcbiAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgIGtleT1cInRkLXB1Ymxpc2gtY3JlYXRlXCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICB7aXNQZXJzaXN0aW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX1cbiAgICAgICAgICA8L1B1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIHtjYW5EZWxldGUgJiYgY2FuUHVibGlzaCAmJiAoXG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaCcpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXt1blB1Ymxpc2h9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge2NhbkNyZWF0ZSAmJiAoXG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlIH0pID0+IHtcbiAgICBjb25zdCB7IG9uRHVwbGljYXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICA8UHVibGlzaGVkVG9vbGJhckJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7XG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICApIDogKFxuICAgICAgPFB1Ymxpc2hlZEJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRCdXR0b24+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvblBlcnNpc3QsIG9uUGVyc2lzdEFuZE5ldywgb25QZXJzaXN0QW5kRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICA8L1B1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmROZXd9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyU2ltcGxlRGVwbG95UHJldmlld0NvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgaGFzQ2hhbmdlZCwgaXNOZXdFbnRyeSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveUJ1dHRvbkxhYmVsJykpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd0NvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBzaG93RGVsZXRlLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICBpc0RlbGV0aW5nLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIGlzTW9kaWZpY2F0aW9uLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGNvbnN0IGNhblB1Ymxpc2ggPSBjb2xsZWN0aW9uLmdldCgncHVibGlzaCcpICYmICF1c2VPcGVuQXV0aG9yaW5nO1xuICAgIGNvbnN0IGNhbkRlbGV0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdkZWxldGUnLCB0cnVlKTtcblxuICAgIGNvbnN0IGRlbGV0ZUxhYmVsID1cbiAgICAgIChoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiZcbiAgICAgICAgaXNNb2RpZmljYXRpb24gJiZcbiAgICAgICAgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzJykpIHx8XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIChpc05ld0VudHJ5IHx8ICFpc01vZGlmaWNhdGlvbikgJiZcbiAgICAgICAgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlVW5wdWJsaXNoZWRFbnRyeScpKSB8fFxuICAgICAgKCFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uICYmIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVB1Ymxpc2hlZEVudHJ5JykpO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIDxTYXZlQnV0dG9uXG4gICAgICAgIGRpc2FibGVkPXshaGFzQ2hhbmdlZH1cbiAgICAgICAga2V5PVwic2F2ZS1idXR0b25cIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYXNDaGFuZ2VkICYmIG9uUGVyc2lzdCgpfVxuICAgICAgPlxuICAgICAgICB7aXNQZXJzaXN0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2aW5nJykgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zYXZlJyl9XG4gICAgICA8L1NhdmVCdXR0b24+LFxuICAgICAgY3VycmVudFN0YXR1c1xuICAgICAgICA/IFtcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9XCJ3b3JrZmxvdy1zdGF0dXMtY29udHJvbHNcIj5cbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyV29ya2Zsb3dTdGF0dXNDb250cm9scygpfVxuICAgICAgICAgICAgICB7IWhhc0NoYW5nZWQgJiYgdGhpcy5yZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pfVxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4sXG4gICAgICAgICAgXVxuICAgICAgICA6ICFpc05ld0VudHJ5ICYmIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9XCJleGlzdGluZy1lbnRyeS13b3JrZmxvdy1wdWJsaXNoLWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7XG4gICAgICAgICAgICAgICAgY2FuQ3JlYXRlLFxuICAgICAgICAgICAgICAgIGNhblB1Ymxpc2gsXG4gICAgICAgICAgICAgICAgY2FuRGVsZXRlLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgKSxcbiAgICAgICghc2hvd0RlbGV0ZSB8fCB1c2VPcGVuQXV0aG9yaW5nKSAmJiAhaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiA/IG51bGwgOiAoXG4gICAgICAgIDxEZWxldGVCdXR0b25cbiAgICAgICAgICBrZXk9XCJkZWxldGUtYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYXNVbnB1Ymxpc2hlZENoYW5nZXMgPyBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyA6IG9uRGVsZXRlfVxuICAgICAgICA+XG4gICAgICAgICAge2lzRGVsZXRpbmcgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGluZycpIDogZGVsZXRlTGFiZWx9XG4gICAgICAgIDwvRGVsZXRlQnV0dG9uPlxuICAgICAgKSxcbiAgICBdO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93RGVwbG95UHJldmlld0NvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudFN0YXR1cywgaXNOZXdFbnRyeSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld0J1dHRvbkxhYmVsJykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggY29udHJvbCBmb3IgcHVibGlzaGVkIHdvcmtmbG93IGVudHJ5LlxuICAgICAqL1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveUJ1dHRvbkxhYmVsJykpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBkaXNwbGF5VXJsLFxuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGhhc1dvcmtmbG93LFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIHQsXG4gICAgICBlZGl0b3JCYWNrTGluayxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgdG89e2VkaXRvckJhY2tMaW5rfT5cbiAgICAgICAgICA8QmFja0Fycm93PuKGkDwvQmFja0Fycm93PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8QmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5iYWNrQ29sbGVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTGFiZWw6IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICB7aGFzQ2hhbmdlZCA/IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNDaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnNhdmVkQ2hhbmdlcycpfTwvQmFja1N0YXR1c0NoYW5nZWQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c1VuY2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuY2hhbmdlc1NhdmVkJyl9PC9CYWNrU3RhdHVzVW5jaGFuZ2VkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbkJhY2tMaW5rPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gdGhpcy5yZW5kZXJXb3JrZmxvd0NvbnRyb2xzKCkgOiB0aGlzLnJlbmRlclNpbXBsZUNvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3dcbiAgICAgICAgICAgICAgPyB0aGlzLnJlbmRlcldvcmtmbG93RGVwbG95UHJldmlld0NvbnRyb2xzKClcbiAgICAgICAgICAgICAgOiB0aGlzLnJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uTWFpbj5cbiAgICAgIDwvVG9vbGJhckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEVkaXRvclRvb2xiYXIpO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionBackLink = /*#__PURE__*/(0, _base.default)(_reactRouterDom.Link, {
  target: "e1d2l9mo18",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}@media (max-width: 768px){padding:1rem;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo17",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.Dropdown, {
  target: "e1d2l9mo16",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", _decapCmsUiDefault.Icon, "{color:", _decapCmsUiDefault.colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo15",
  label: "BackArrow"
})("color:", _decapCmsUiDefault.colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo14",
  label: "BackCollection"
})("color:", _decapCmsUiDefault.colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo13",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "j9a02z",
  styles: "margin-top:6px"
} : {
  name: "j9a02z",
  styles: "margin-top:6px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const BackStatusUnchanged = /*#__PURE__*/(0, _base.default)(BackStatus, {
  target: "e1d2l9mo12",
  label: "BackStatusUnchanged"
})(_decapCmsUiDefault.components.textBadgeSuccess, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatusChanged = /*#__PURE__*/(0, _base.default)(BackStatus, {
  target: "e1d2l9mo11",
  label: "BackStatusChanged"
})(_decapCmsUiDefault.components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarButton = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1d2l9mo10",
  label: "ToolbarButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.buttons.default, ";", styles.buttonMargin, ";", styles.noOverflow, ";display:block;@media (max-width: 1200px){padding:0 10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DeleteButton = /*#__PURE__*/(0, _base.default)(ToolbarButton, {
  target: "e1d2l9mo9",
  label: "DeleteButton"
})(_decapCmsUiDefault.buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SaveButton = /*#__PURE__*/(0, _base.default)(ToolbarButton, {
  target: "e1d2l9mo8",
  label: "SaveButton"
})(_decapCmsUiDefault.buttons.lightBlue, ";&[disabled]{", _decapCmsUiDefault.buttons.disabled, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedToolbarButton = /*#__PURE__*/(0, _base.default)(DropdownButton, {
  target: "e1d2l9mo7",
  label: "PublishedToolbarButton"
})(styles.publishedButton, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedButton = /*#__PURE__*/(0, _base.default)(ToolbarButton, {
  target: "e1d2l9mo6",
  label: "PublishedButton"
})(styles.publishedButton, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishButton = /*#__PURE__*/(0, _base.default)(DropdownButton, {
  target: "e1d2l9mo5",
  label: "PublishButton"
})("background-color:", _decapCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusButton = /*#__PURE__*/(0, _base.default)(DropdownButton, {
  target: "e1d2l9mo4",
  label: "StatusButton"
})("background-color:", _decapCmsUiDefault.colorsRaw.tealLight, ";color:", _decapCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1d2l9mo3",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", _decapCmsUiDefault.colorsRaw.blue, ";display:flex;align-items:center;a,", _decapCmsUiDefault.Icon, "{color:", _decapCmsUiDefault.colorsRaw.blue, ";}", _decapCmsUiDefault.Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RefreshPreviewButton = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1d2l9mo2",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", _decapCmsUiDefault.colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "e1d2l9mo27",
  label: "PreviewLink"
});
const PublishDropDownItem = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.DropdownItem, {
  target: "e1d2l9mo1",
  label: "PublishDropDownItem"
})(process.env.NODE_ENV === "production" ? {
  name: "svxjwj",
  styles: "min-width:initial"
} : {
  name: "svxjwj",
  styles: "min-width:initial",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StatusDropdownItem = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.DropdownItem, {
  target: "e1d2l9mo0",
  label: "StatusDropdownItem"
})(_decapCmsUiDefault.Icon, "{color:", _decapCmsUiDefault.colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class EditorToolbar extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderSimpleControls", () => {
      const {
        collection,
        hasChanged,
        isNewEntry,
        showDelete,
        onDelete,
        t
      } = this.props;
      const canCreate = collection.get('create');
      return (0, _react2.jsx)(_react.default.Fragment, null, !isNewEntry && !hasChanged ? this.renderExistingEntrySimplePublishControls({
        canCreate
      }) : this.renderNewEntrySimplePublishControls({
        canCreate
      }), (0, _react2.jsx)("div", null, showDelete ? (0, _react2.jsx)(DeleteButton, {
        onClick: onDelete
      }, t('editor.editorToolbar.deleteEntry')) : null));
    });
    _defineProperty(this, "renderDeployPreviewControls", label => {
      const {
        deployPreview = {},
        loadDeployPreview,
        t
      } = this.props;
      const {
        url,
        status,
        isFetching
      } = deployPreview;
      if (!status) {
        return;
      }
      const deployPreviewReady = status === 'SUCCESS' && !isFetching;
      return (0, _react2.jsx)(PreviewButtonContainer, null, deployPreviewReady ? (0, _react2.jsx)(PreviewLink, {
        rel: "noopener noreferrer",
        target: "_blank",
        href: url
      }, (0, _react2.jsx)("span", null, label), (0, _react2.jsx)(_decapCmsUiDefault.Icon, {
        type: "new-tab",
        size: "xsmall"
      })) : (0, _react2.jsx)(RefreshPreviewButton, {
        onClick: loadDeployPreview
      }, (0, _react2.jsx)("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), (0, _react2.jsx)(_decapCmsUiDefault.Icon, {
        type: "refresh",
        size: "xsmall"
      })));
    });
    _defineProperty(this, "renderStatusInfoTooltip", () => {
      const {
        t,
        currentStatus
      } = this.props;
      const statusToLocaleKey = {
        [_publishModes.status.get('DRAFT')]: 'statusInfoTooltipDraft',
        [_publishModes.status.get('PENDING_REVIEW')]: 'statusInfoTooltipInReview'
      };
      const statusKey = Object.keys(statusToLocaleKey).find(key => key === currentStatus);
      return (0, _react2.jsx)(TooltipContainer, null, (0, _react2.jsx)(Tooltip, null, (0, _react2.jsx)(_decapCmsUiDefault.Icon, {
        type: "info-circle",
        size: "small",
        className: "tooltip"
      })), statusKey && (0, _react2.jsx)(TooltipText, null, t(`editor.editorToolbar.${statusToLocaleKey[statusKey]}`)));
    });
    _defineProperty(this, "renderWorkflowStatusControls", () => {
      const {
        isUpdatingStatus,
        onChangeStatus,
        currentStatus,
        t,
        useOpenAuthoring
      } = this.props;
      const statusToTranslation = {
        [_publishModes.status.get('DRAFT')]: t('editor.editorToolbar.draft'),
        [_publishModes.status.get('PENDING_REVIEW')]: t('editor.editorToolbar.inReview'),
        [_publishModes.status.get('PENDING_PUBLISH')]: t('editor.editorToolbar.ready')
      };
      const buttonText = isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.status', {
        status: statusToTranslation[currentStatus]
      });
      return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "120px",
        renderButton: () => (0, _react2.jsx)(StatusButton, null, buttonText)
      }, (0, _react2.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.draft'),
        onClick: () => onChangeStatus('DRAFT'),
        icon: currentStatus === _publishModes.status.get('DRAFT') ? 'check' : null
      }), (0, _react2.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.inReview'),
        onClick: () => onChangeStatus('PENDING_REVIEW'),
        icon: currentStatus === _publishModes.status.get('PENDING_REVIEW') ? 'check' : null
      }), useOpenAuthoring ? '' : (0, _react2.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.ready'),
        onClick: () => onChangeStatus('PENDING_PUBLISH'),
        icon: currentStatus === _publishModes.status.get('PENDING_PUBLISH') ? 'check' : null
      })), useOpenAuthoring && this.renderStatusInfoTooltip());
    });
    _defineProperty(this, "renderNewEntryWorkflowPublishControls", ({
      canCreate,
      canPublish
    }) => {
      const {
        isPublishing,
        onPublish,
        onPublishAndNew,
        onPublishAndDuplicate,
        t
      } = this.props;
      return canPublish ? (0, _react2.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "200px",
        renderButton: () => (0, _react2.jsx)(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _react2.jsx)(PublishDropDownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPublish
      }), canCreate ? (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(PublishDropDownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPublishAndNew
      }), (0, _react2.jsx)(PublishDropDownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPublishAndDuplicate
      })) : null) : '';
    });
    _defineProperty(this, "renderExistingEntryWorkflowPublishControls", ({
      canCreate,
      canPublish,
      canDelete
    }) => {
      const {
        unPublish,
        onDuplicate,
        isPersisting,
        t
      } = this.props;
      return canPublish || canCreate ? (0, _react2.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        key: "td-publish-create",
        renderButton: () => (0, _react2.jsx)(PublishedToolbarButton, null, isPersisting ? t('editor.editorToolbar.unpublishing') : t('editor.editorToolbar.published'))
      }, canDelete && canPublish && (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.unpublish'),
        icon: "arrow",
        iconDirection: "right",
        onClick: unPublish
      }), canCreate && (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.duplicate'),
        icon: "add",
        onClick: onDuplicate
      })) : '';
    });
    _defineProperty(this, "renderExistingEntrySimplePublishControls", ({
      canCreate
    }) => {
      const {
        onDuplicate,
        t
      } = this.props;
      return canCreate ? (0, _react2.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _react2.jsx)(PublishedToolbarButton, null, t('editor.editorToolbar.published'))
      }, (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.duplicate'),
        icon: "add",
        onClick: onDuplicate
      })) : (0, _react2.jsx)(PublishedButton, null, t('editor.editorToolbar.published'));
    });
    _defineProperty(this, "renderNewEntrySimplePublishControls", ({
      canCreate
    }) => {
      const {
        onPersist,
        onPersistAndNew,
        onPersistAndDuplicate,
        isPersisting,
        t
      } = this.props;
      return (0, _react2.jsx)("div", null, (0, _react2.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _react2.jsx)(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPersist
      }), canCreate ? (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPersistAndNew
      }), (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPersistAndDuplicate
      })) : null));
    });
    _defineProperty(this, "renderSimpleDeployPreviewControls", () => {
      const {
        hasChanged,
        isNewEntry,
        t
      } = this.props;
      if (!isNewEntry && !hasChanged) {
        return this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel'));
      }
    });
    _defineProperty(this, "renderWorkflowControls", () => {
      const {
        onPersist,
        onDelete,
        onDeleteUnpublishedChanges,
        showDelete,
        hasChanged,
        hasUnpublishedChanges,
        useOpenAuthoring,
        isPersisting,
        isDeleting,
        isNewEntry,
        isModification,
        currentStatus,
        collection,
        t
      } = this.props;
      const canCreate = collection.get('create');
      const canPublish = collection.get('publish') && !useOpenAuthoring;
      const canDelete = collection.get('delete', true);
      const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
      return [(0, _react2.jsx)(SaveButton, {
        disabled: !hasChanged,
        key: "save-button",
        onClick: () => hasChanged && onPersist()
      }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), currentStatus ? [(0, _react2.jsx)(_react.default.Fragment, {
        key: "workflow-status-controls"
      }, this.renderWorkflowStatusControls(), !hasChanged && this.renderNewEntryWorkflowPublishControls({
        canCreate,
        canPublish
      }))] : !isNewEntry && (0, _react2.jsx)(_react.default.Fragment, {
        key: "existing-entry-workflow-publish-controls"
      }, this.renderExistingEntryWorkflowPublishControls({
        canCreate,
        canPublish,
        canDelete
      })), (!showDelete || useOpenAuthoring) && !hasUnpublishedChanges && !isModification ? null : (0, _react2.jsx)(DeleteButton, {
        key: "delete-button",
        onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
      }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
    });
    _defineProperty(this, "renderWorkflowDeployPreviewControls", () => {
      const {
        currentStatus,
        isNewEntry,
        t
      } = this.props;
      if (currentStatus) {
        return this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel'));
      }

      /**
       * Publish control for published workflow entry.
       */
      if (!isNewEntry) {
        return this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel'));
      }
    });
  }
  componentDidMount() {
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;
    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }
  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;
    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }
  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t,
      editorBackLink
    } = this.props;
    return (0, _react2.jsx)(ToolbarContainer, null, (0, _react2.jsx)(ToolbarSectionBackLink, {
      to: editorBackLink
    }, (0, _react2.jsx)(BackArrow, null, "\u2190"), (0, _react2.jsx)("div", null, (0, _react2.jsx)(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? (0, _react2.jsx)(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : (0, _react2.jsx)(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), (0, _react2.jsx)(ToolbarSectionMain, null, (0, _react2.jsx)(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowControls() : this.renderSimpleControls()), (0, _react2.jsx)(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowDeployPreviewControls() : this.renderSimpleDeployPreviewControls())));
  }
}
exports.EditorToolbar = EditorToolbar;
_defineProperty(EditorToolbar, "propTypes", {
  isPersisting: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isUpdatingStatus: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  onPersist: _propTypes.default.func.isRequired,
  onPersistAndNew: _propTypes.default.func.isRequired,
  onPersistAndDuplicate: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onPublishAndNew: _propTypes.default.func.isRequired,
  onPublishAndDuplicate: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  collection: _reactImmutableProptypes.default.map.isRequired,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _propTypes.default.object,
  loadDeployPreview: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  editorBackLink: _propTypes.default.string.isRequired
});
var _default = exports.default = (0, _reactPolyglot.translate)()(EditorToolbar);